"use strict";
/*!
 * Copyright 2019 Evernote Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuthQueryArgs = exports.GoogleDriveFileQueryArgs = exports.GoogleServicesMutationArgs = exports.GoogleServicesQueryArgs = exports.GoogleDriveResponseListGQLType = exports.GoogleDriveFileGQLType = exports.GoogleDriveResponseGQLType = exports.TtlCacheManagerWrapper = exports.OAuthCredentialGQLType = exports.GoogleApiCredentialGQLType = exports.GoogleScopes = exports.GoogleServicesEnum = exports.GoogleApiCredentialSchemaName = exports.GoogleServicesGQLEndpoint = void 0;
const conduit_core_1 = require("conduit-core");
const conduit_utils_1 = require("conduit-utils");
const graphql_1 = require("graphql");
const cacheTableName = 'GoogleDrive';
exports.GoogleServicesGQLEndpoint = 'GoogleServices';
exports.GoogleApiCredentialSchemaName = 'GoogleAuthCredential';
var GoogleServicesEnum;
(function (GoogleServicesEnum) {
    GoogleServicesEnum["DRIVE"] = "DRIVE";
    GoogleServicesEnum["CALENDAR"] = "CALENDAR";
    GoogleServicesEnum["CONTACTS"] = "CONTACTS";
})(GoogleServicesEnum = exports.GoogleServicesEnum || (exports.GoogleServicesEnum = {}));
exports.GoogleScopes = {
    drive: {
        enum: GoogleServicesEnum.DRIVE,
        scope: '/auth/drive',
        scopeUri: 'https://www.googleapis.com/auth/drive',
    },
    calendar: {
        enum: GoogleServicesEnum.CALENDAR,
        scope: '/auth/calendar',
        scopeUri: 'https://www.google.com/calendar/feeds',
    },
    contacts: {
        enum: GoogleServicesEnum.CONTACTS,
        scope: '/m8/feeds',
        scopeUri: 'https://www.google.com/m8/feeds',
    },
};
const GoogleScopesType = new graphql_1.GraphQLEnumType({
    name: 'GoogleScopesEnum',
    description: 'Recognized Google authorization scopes for use in Google Services API.',
    values: {
        DRIVE: {
            value: GoogleServicesEnum.DRIVE,
            description: 'Scope for Google Drive API access.',
        },
        CALENDAR: {
            value: GoogleServicesEnum.CALENDAR,
            description: 'Scope for Google Calendar API access.',
        },
        CONTACTS: {
            value: GoogleServicesEnum.CONTACTS,
            description: 'Scope for Google Contacts API access.',
        },
    },
});
exports.GoogleApiCredentialGQLType = new graphql_1.GraphQLObjectType({
    name: exports.GoogleApiCredentialSchemaName,
    fields: () => ({
        accessToken: {
            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),
            description: 'OAuth 2.0 access token generated by Google Services.',
        },
        oAuthVersion: {
            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat),
            description: 'The version of OAuth by which this credential abides.',
        },
        services: {
            type: new graphql_1.GraphQLList(GoogleScopesType),
            description: 'Google Services for which these credentials are authorized to access.',
        },
        scopeUris: {
            type: new graphql_1.GraphQLList(graphql_1.GraphQLString),
            description: 'Google Services scopes indicating specific permissions that these credentials may access.',
        },
        refreshAfter: {
            type: graphql_1.GraphQLFloat,
            description: 'The time, in milliseconds since epoch, after which a new Google API Credential should be retrieved.',
        },
        expiresAfter: {
            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat),
            description: 'The time, in milliseconds since epoch, after which this Google API Credential will expire.',
        },
    }),
    description: 'Credential information needed to make GAPI requests.',
});
exports.OAuthCredentialGQLType = new graphql_1.GraphQLObjectType({
    name: 'OAuthCredential',
    fields: () => ({
        serviceId: {
            type: graphql_1.GraphQLFloat,
        },
        oAuthVersion: { type: graphql_1.GraphQLFloat },
        accessToken: { type: graphql_1.GraphQLString },
        scope: { type: graphql_1.GraphQLString },
        created: { type: graphql_1.GraphQLFloat },
        updated: { type: graphql_1.GraphQLFloat },
        expires: { type: graphql_1.GraphQLFloat },
        refreshesAfter: { type: graphql_1.GraphQLString },
    }),
});
class TtlCacheManagerWrapper {
    constructor(ttlInMilliseconds = 5 * conduit_utils_1.MILLIS_IN_ONE_MINUTE, softCap = 750, hardCap = 1000) {
        this.ttlInMilliseconds = ttlInMilliseconds;
        this.cacheTableName = 'GoogleDrive';
        this.googleDriveCachePolicy = { softCap, hardCap };
        this.cacheManager = new conduit_utils_1.CacheManager(this.googleDriveCachePolicy);
        this.cacheManager.createTable(this.cacheTableName);
    }
    put(key, value) {
        const cachedValue = {
            data: value,
            timestamp: Date.now(),
        };
        this.cacheManager.put(this.cacheTableName, key, cachedValue);
    }
    get(key) {
        const entry = this.cacheManager.get(cacheTableName, key);
        if (entry && entry.data) {
            if (Date.now() - entry.timestamp <= this.ttlInMilliseconds) {
                return entry.data;
            }
            else {
                this.cacheManager.delete(this.cacheTableName, key);
            }
        }
        return null;
    }
    clear() {
        this.cacheManager.empty(this.cacheTableName);
    }
}
exports.TtlCacheManagerWrapper = TtlCacheManagerWrapper;
exports.GoogleDriveResponseGQLType = new graphql_1.GraphQLObjectType({
    name: 'GoogleDriveResponse',
    description: 'Google Drive File metadata and information about the response.',
    fields: () => ({
        reason: {
            type: graphql_1.GraphQLString,
            description: 'Reason for the response provided by Google Drive API',
        },
        message: {
            type: graphql_1.GraphQLString,
            description: 'A short message explaining the repsonse.',
        },
        fileId: {
            type: graphql_1.GraphQLString,
            description: 'Resource ID for the Google Drive File.',
        },
        data: {
            type: exports.GoogleDriveFileGQLType,
            description: 'Metadata describing a singular Google Drive File. If the statusCode is not 200, then this entry may be undefined.',
        },
    }),
});
exports.GoogleDriveFileGQLType = new graphql_1.GraphQLObjectType({
    name: 'GoogleDriveFile',
    fields: () => ({
        id: {
            type: graphql_1.GraphQLString,
            description: 'The unique identifier for this file. Corresponds to Google File.id',
        },
        label: {
            type: graphql_1.GraphQLString,
            description: 'The name of the file. Corresponds to Google File.name',
        },
        description: {
            type: graphql_1.GraphQLString,
            description: 'A short description of the file. Corresponds to Google File.description',
        },
        modifiedTime: {
            type: graphql_1.GraphQLString,
            description: 'The last time the file was modified by anyone (RFC 3339 date-time). Corresponds to File.modifiedTime',
        },
        mimeType: {
            type: graphql_1.GraphQLString,
            description: 'The MIME type of the file. Corresponds to File.mimeType',
        },
        binaryUri: {
            type: graphql_1.GraphQLString,
            description: 'A link for downloading the content of the file in a browser. Corresponds to File.webContentLink',
        },
        viewerUri: {
            type: graphql_1.GraphQLString,
            description: 'A link for opening the file in a relevant Google editor or viewer in a browser. Corresponds to File.webViewLink',
        },
        fileSize: {
            type: graphql_1.GraphQLFloat,
            description: 'The size of the file\'s content in bytes. Corresponds to File.size',
        },
        thumbnailLink: {
            type: graphql_1.GraphQLString,
            description: 'A short-lived link to the file\'s thumbnail, if available. Typically lasts on the order of hours. Corresponds to File.thumbnailLink',
        },
        fullFileExtension: {
            type: graphql_1.GraphQLString,
            description: 'The full file extension extracted from the name field. May contain multiple concatenated extensions. Corresponds to File.fullFileExtension',
        },
    }),
    description: 'Metadata identifying a file resource managed and hosted by Google Drive.',
});
exports.GoogleDriveResponseListGQLType = new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(exports.GoogleDriveResponseGQLType));
exports.GoogleServicesQueryArgs = conduit_core_1.schemaToGraphQLArgs({ service: 'string' });
exports.GoogleServicesMutationArgs = conduit_core_1.schemaToGraphQLArgs({ authCode: 'string' });
exports.GoogleDriveFileQueryArgs = conduit_core_1.schemaToGraphQLArgs({ resourceIds: 'string[]' });
exports.OAuthQueryArgs = conduit_core_1.schemaToGraphQLArgs({ serviceId: 'number' });
//# sourceMappingURL=GoogleServicesTypes.js.map
"use strict";
/*
 * Copyright 2020 Evernote Corporation. All rights reserved.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_embed_1 = require("./schema-embed");
const ts_types_1 = require("./ts-types");
const ajv_1 = __importDefault(require("ajv"));
const en_ts_utils_1 = require("en-ts-utils");
__export(require("./schema-embed"));
__export(require("./ts-types"));
const gValidator = new ajv_1.default({
    useDefaults: false,
    validateSchema: true,
    allErrors: true,
    missingRefs: true,
    schemas: schema_embed_1.SchemaArray,
});
const gFillDefaultsValidator = new ajv_1.default({
    useDefaults: true,
    validateSchema: true,
    allErrors: true,
    missingRefs: true,
    schemas: schema_embed_1.SchemaArray,
});
exports.NullUserID = 0;
function agentFromUserID(userID) {
    return {
        id: userID.toString(),
        type: ts_types_1.AgentType.USER,
    };
}
exports.agentFromUserID = agentFromUserID;
class ValidationError extends Error {
    constructor(schemaName, message, details) {
        super(message);
        this.schemaName = schemaName;
        this.details = details;
    }
}
exports.ValidationError = ValidationError;
function validateDataAgainstSchema(schema, fillDefaults, data) {
    const ajv = fillDefaults ? gFillDefaultsValidator : gValidator;
    let isInlineSchema = true;
    let validator;
    let schemaName = '<inline schema>';
    if (typeof schema === 'string') {
        isInlineSchema = false;
        schemaName = schema;
        validator = ajv.getSchema(`${schemaName}.schema.json`);
    }
    else {
        try {
            validator = ajv.compile(schema);
        }
        catch (error) {
            throw new ValidationError(schemaName, 'schema compilation failed', error);
        }
    }
    if (!validator) {
        throw new ValidationError(schemaName, isInlineSchema ? 'failed to compile inline schema' : 'failed to find schema', schemaName);
    }
    if (!validator(data)) {
        throw new ValidationError(schemaName, 'validation failed', ajv.errorsText(validator.errors));
    }
}
exports.validateDataAgainstSchema = validateDataAgainstSchema;
function validateEntity(ent, fillDefaults) {
    validateDataAgainstSchema(ent.type + 'Entity', fillDefaults, ent);
}
exports.validateEntity = validateEntity;
// Using an IIFE here over a Copy Constructor for most possible compatibility.
exports.DefaultDeterministicIdGenerator = (() => {
    /* Must map to NSync Type Numbers */
    const entityTypeMap = new Map();
    entityTypeMap.set(ts_types_1.EntityType.Note, 0);
    entityTypeMap.set(ts_types_1.EntityType.Notebook, 1);
    entityTypeMap.set(ts_types_1.EntityType.Workspace, 2);
    entityTypeMap.set(ts_types_1.EntityType.Attachment, 3);
    entityTypeMap.set(ts_types_1.EntityType.Tag, 4);
    entityTypeMap.set(ts_types_1.EntityType.SavedSearch, 5);
    entityTypeMap.set(ts_types_1.EntityType.Shortcut, 6);
    // entityTypeMap.set(EntityType.RecipientSettings, 7);
    // entityTypeMap.set(EntityType.NoteTags, 8);
    // entityTypeMap.set(EntityType.NoteAttachments, 9);
    // entityTypeMap.set(EntityType.AccessInfo, 10);
    // entityTypeMap.set(EntityType.MutationTracker, 11);
    entityTypeMap.set(ts_types_1.EntityType.Board, 12);
    entityTypeMap.set(ts_types_1.EntityType.Widget, 13);
    // entityTypeMap.set(EntityType.TaskGroup, 14);
    // entityTypeMap.set(EntityType.Task, 15);
    return new en_ts_utils_1.DeterministicIdGenerator(entityTypeMap);
})();
//# sourceMappingURL=index.js.map
//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var Types = require('./Types');
  var Errors = require('./Errors');
  var Limits = require('./Limits');
  var MarketErrors = require('./MarketErrors');


  module.exports.CashOnDeliveryTimeRange = {
    'RANGE_MORNING' : 1,
    'RANGE_HOUR_12_TO_14' : 2,
    'RANGE_HOUR_14_TO_16' : 3,
    'RANGE_HOUR_16_TO_18' : 4,
    'RANGE_HOUR_18_TO_20' : 5,
    'RANGE_HOUR_20_TO_21' : 6
  };

  module.exports.FulfillmentServiceType = {
    'SHIPWIRE' : 1,
    'NET_LOGISTICS' : 2,
    'INGRAM_MICRO' : 3,
    'BORDER_JUMP' : 4,
    'SHIPWIRE_GB' : 5,
    'INGRAM_MICRO_DE' : 6,
    'KERRY_CN' : 7
  };

  module.exports.ShippingServiceLevel = {
    'ONE_DAY_SHIPPING' : 1,
    'TWO_DAY_SHIPPING' : 2,
    'GROUND_SHIPPING' : 3,
    'ECONOMY_INTL_SHIPPING' : 10,
    'INTL_SHIPPING' : 11,
    'PLUS_INTL_SHIPPING' : 12,
    'PREMIUM_INTL_SHIPPING' : 13,
    'FEDEX_INTL_ECONOMY' : 14
  };

  module.exports.CommerceServiceType = {
    'ADYEN_CREDITCARD' : 1,
    'CASH_ON_DELIVERY' : 2,
    'REPLACEMENT' : 3,
    'ADYEN_ALIPAY_REDIRECT' : 4,
    'ADYEN_IDEAL' : 6,
    'ADYEN_GIROPAY' : 7,
    'ADYEN_SOFORT' : 8,
    'ALIPAY_DIRECT' : 9
  };

  module.exports.CommerceServiceLabelType = {
    'CREDIT_CARD' : 1,
    'CASH_ON_DELIVERY' : 2,
    'ALIPAY' : 3
  };

  module.exports.OrderType = {
    'PHYSICAL_ITEM_ORDER' : 1,
    'RETURN_ORDER' : 101,
    'REPLACEMENT_ORDER' : 102,
    'REFUND_ORDER' : 103
  };

  module.exports.UserAddressLabelType = {
    'OTHER' : 1,
    'HOME' : 2,
    'WORK' : 3
  };

  module.exports.ShipmentStatus = {
    'NEW' : 1,
    'SUCCESS' : 2,
    'FAILURE' : 3,
    'HOLD' : 4,
    'ADMIN_COMPLETE' : 5
  };

  module.exports.PaymentStatus = {
    'NEW' : 1,
    'PENDING' : 2,
    'SUCCESS' : 3,
    'FAILURE' : 4
  };

  module.exports.PaymentType = {
    'AUTHORIZE' : 1,
    'CAPTURE' : 2,
    'REFUND' : 3,
    'RE_AUTHORIZE' : 4,
    'CANCEL' : 5
  };

  module.exports.OrderTaskType = {
    'CHECK_AUTHORIZE_PAYMENT_STATUS' : 1,
    'SUBMIT_SHIPPING_ORDER' : 2,
    'CHECK_SHIPPING_ORDER_PROCESSING_STATUS' : 3,
    'CHECK_SHIPPING_STATUS' : 4,
    'CAPTURE_SHIPMENT_PAYMENT' : 5,
    'CHECK_CAPTURE_PAYMENT_STATUS' : 6,
    'PROCESS_PENDING_PREORDER' : 7,
    'CHECK_PREORDER_AUTHORIZE_PAYMENT_STATUS' : 8,
    'DECREMENT_STOCK_COUNT' : 9,
    'CHECK_EXTERNAL_PENDING_PAYMENT_STATUS' : 10,
    'DETECT_DUPLICATE_ORDER' : 11,
    'DETECT_PAYMENT_FRAUD' : 12,
    'CHECK_REFUND_PAYMENT_STATUS' : 101,
    'CHANGE_ORDER_STATUS' : 102,
    'SEND_ORDER_CONFIRMATION_EMAIL' : 103
  };

  module.exports.FilterListType = {
    'INCLUDE_FILTER' : 1,
    'EXCLUDE_FILTER' : 2
  };

  module.exports.OrderStatus = {
    'NEW' : 1,
    'ACCEPTED' : 2,
    'PENDING_PAYMENT' : 12,
    'PENDING_DUPLICATE_CHECK' : 13,
    'PENDING_FRAUD_CHECK' : 14,
    'PROCESSING' : 15,
    'UNSHIPPED' : 3,
    'SHIPPING' : 4,
    'SHIPPED' : 5,
    'COMPLETED' : 6,
    'HELD' : 7,
    'CANCELED' : 8,
    'PREORDER_ACCEPTED' : 9,
    'PREORDER_UNSHIPPED' : 10,
    'REJECTED' : 11,
    'USER_CANCELED' : 16,
    'ADMIN_CANCELED' : 101,
    'ADMIN_CLOSED' : 102,
    'ADMIN_PRIORITIZED_UNSHIPPED' : 103
  };

  module.exports.TaxType = {
    'SALES_TAX' : 1,
    'VAT' : 2,
    'CONSUMPTION_TAX' : 3
  };

  module.exports.FapiaoCategory = {
    'GENERAL' : 1,
    'VAT' : 2
  };

  module.exports.FapiaoCustomerType = {
    'INDIVIDUAL' : 1,
    'CORPORATION' : 2
  };

  module.exports.FapiaoExpenseCategory = {
    'BUSINESS_SERVICE_FEE' : 1,
    'TECHNICAL_SERVICE_FEE' : 2,
    'DETAILS' : 3,
    'COMPUTER_ACCESSORIES' : 4,
    'OFFICE_SUPPLIES' : 5,
    'TECHNICAL_CONSULTATION_FEE' : 6
  };

  module.exports.FapiaoDeliveryStatus = {
    'REQUESTED' : 1,
    'SENT' : 2,
    'NOT_APPLICABLE' : 3
  };

  module.exports.EDAM_MARKET_COMMERCE_LOCALE_PATTERN = '^[a-zA-Z]{2,3}([-_][a-zA-Z]{2})?$';

  module.exports.EDAM_MARKET_COMMERCE_CART_SCHEDULED_DELIVERY_DATE_PATTERN = '^[0-9]{8}$';

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_CHINESE_MOBILE_PHONE_PATTERN = '^1[0-9]{10}$';

  module.exports.EDAM_MARKET_COMMERCE_CART_MIN_ITEMS = 0;

  module.exports.EDAM_MARKET_COMMERCE_CART_MAX_ITEMS = 10000;

  module.exports.EDAM_MARKET_COMMERCE_CART_ITEM_SKU_MIN_LENGTH = 1;

  module.exports.EDAM_MARKET_COMMERCE_CART_ITEM_SKU_MAX_LENGTH = 64;

  module.exports.EDAM_MARKET_COMMERCE_CART_ITEM_MIN_QUANTITY = 1;

  module.exports.EDAM_MARKET_COMMERCE_CART_ITEM_MAX_QUANTITY = 999;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_NAME_MIN_LENGTH = 0;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_NAME_MAX_LENGTH = 50;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_LINE_MIN_LENGTH = 0;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_LINE_MAX_LENGTH = 50;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_CITY_MIN_LENGTH = 0;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_CITY_MAX_LENGTH = 50;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_STATE_MIN_LENGTH = 0;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_STATE_MAX_LENGTH = 50;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_POSTAL_CODE_MIN_LENGTH = 0;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_POSTAL_CODE_MAX_LENGTH = 20;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_CONTACT_PHONE_MIN_LENGTH = 0;

  module.exports.EDAM_MARKET_COMMERCE_ADDRESS_CONTACT_PHONE_MAX_LENGTH = 20;

  module.exports.EDAM_MARKET_COMMERCE_PAYMENT_METHOD_ENCRYPTED_CARD_MIN_LENGTH = 400;

  module.exports.EDAM_MARKET_COMMERCE_PAYMENT_METHOD_ENCRYPTED_CARD_MAX_LENGTH = 1000;

  module.exports.EDAM_MARKET_COMMERCE_CART_COMMENT_MIN_LENGTH = 0;

  module.exports.EDAM_MARKET_COMMERCE_CART_COMMENT_MAX_LENGTH = 500;

  module.exports.EDAM_MARKET_COMMERCE_FAPIAO_CORPORATION_NAME_MAX_LENGTH = 255;

  module.exports.ShippingSLA = Thrift.Struct.define('ShippingSLA',  {
    1: { alias: 'minimumDays', type: Thrift.Type.I32 },
    2: { alias: 'maximumDays', type: Thrift.Type.I32 },
    3: { alias: 'inBusinessDays', type: Thrift.Type.BOOL }
  });

  module.exports.CartItem = Thrift.Struct.define('CartItem',  {
    1: { alias: 'sku', type: Thrift.Type.STRING },
    2: { alias: 'quantity', type: Thrift.Type.I32 }
  });

  module.exports.Cart = Thrift.Struct.define('Cart',  {
    1: { alias: 'cartVersionId', type: Thrift.Type.I64 },
    2: { alias: 'items', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.CartItem)  },
    3: { alias: 'requestCountry', type: Thrift.Type.STRING },
    4: { alias: 'requestLanguage', type: Thrift.Type.STRING },
    5: { alias: 'shippingAddrId', type: Thrift.Type.I32 },
    6: { alias: 'shippingServiceLevel', type: Thrift.Type.I32 },
    7: { alias: 'commerceServiceType', type: Thrift.Type.I32 },
    8: { alias: 'userPaymentMethodId', type: Thrift.Type.I32 },
    9: { alias: 'scheduledDeliveryDate', type: Thrift.Type.STRING },
    10: { alias: 'scheduledDeliveryTimeRange', type: Thrift.Type.I32 },
    11: { alias: 'marketCountry', type: Thrift.Type.STRING },
    12: { alias: 'comment', type: Thrift.Type.STRING }
  });

  module.exports.UserAddress = Thrift.Struct.define('UserAddress',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'name', type: Thrift.Type.STRING },
    3: { alias: 'address1', type: Thrift.Type.STRING },
    4: { alias: 'address2', type: Thrift.Type.STRING },
    5: { alias: 'city', type: Thrift.Type.STRING },
    6: { alias: 'state', type: Thrift.Type.STRING },
    7: { alias: 'postalCode', type: Thrift.Type.STRING },
    8: { alias: 'country', type: Thrift.Type.STRING },
    9: { alias: 'label', type: Thrift.Type.I32 },
    10: { alias: 'defaultAddress', type: Thrift.Type.BOOL },
    11: { alias: 'contactPhone', type: Thrift.Type.STRING }
  });

  module.exports.PaymentMethod = Thrift.Struct.define('PaymentMethod',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'commerceServiceType', type: Thrift.Type.I32 },
    3: { alias: 'cardType', type: Thrift.Type.STRING },
    4: { alias: 'displayInfo', type: Thrift.Type.STRING },
    5: { alias: 'expDate', type: Thrift.Type.I64 },
    6: { alias: 'billingAddress', type: Thrift.Type.STRUCT, def: module.exports.UserAddress },
    7: { alias: 'defaultPaymentMethod', type: Thrift.Type.BOOL },
    8: { alias: 'encryptedCard', type: Thrift.Type.STRING },
    9: { alias: 'tokenId', type: Thrift.Type.STRING },
    10: { alias: 'updated', type: Thrift.Type.I64 }
  });

  module.exports.FapiaoProfile = Thrift.Struct.define('FapiaoProfile',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'userId', type: Thrift.Type.I32 },
    3: { alias: 'customerType', type: Thrift.Type.I32 },
    4: { alias: 'name', type: Thrift.Type.STRING },
    5: { alias: 'category', type: Thrift.Type.I32 },
    6: { alias: 'address', type: Thrift.Type.STRUCT, def: module.exports.UserAddress },
    7: { alias: 'created', type: Thrift.Type.I64 },
    8: { alias: 'updated', type: Thrift.Type.I64 }
  });

  module.exports.FapiaoDeliveryRecord = Thrift.Struct.define('FapiaoDeliveryRecord',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'fapiaoProfile', type: Thrift.Type.STRUCT, def: module.exports.FapiaoProfile },
    3: { alias: 'expenseCategory', type: Thrift.Type.I32 },
    4: { alias: 'status', type: Thrift.Type.I32 },
    5: { alias: 'carrier', type: Thrift.Type.STRING },
    6: { alias: 'trackingNumber', type: Thrift.Type.STRING },
    7: { alias: 'trackingUrl', type: Thrift.Type.STRING },
    8: { alias: 'created', type: Thrift.Type.I64 },
    9: { alias: 'updated', type: Thrift.Type.I64 }
  });

  module.exports.CheckoutCost = Thrift.Struct.define('CheckoutCost',  {
    1: { alias: 'currency', type: Thrift.Type.STRING },
    2: { alias: 'baseCost', type: Thrift.Type.I32 },
    14: { alias: 'subtotalNontaxable', type: Thrift.Type.I32 },
    3: { alias: 'shippingCost', type: Thrift.Type.I32 },
    4: { alias: 'taxCost', type: Thrift.Type.I32 },
    21: { alias: 'baseTaxCost', type: Thrift.Type.I32 },
    22: { alias: 'shippingTaxCost', type: Thrift.Type.I32 },
    15: { alias: 'taxRate', type: Thrift.Type.I32 },
    16: { alias: 'taxExemptionReasonMap', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.STRING )  },
    18: { alias: 'taxType', type: Thrift.Type.I32 },
    5: { alias: 'cashOnDeliveryCost', type: Thrift.Type.I32 },
    12: { alias: 'importCost', type: Thrift.Type.I32 },
    6: { alias: 'totalCost', type: Thrift.Type.I32 },
    19: { alias: 'importDutyCalculated', type: Thrift.Type.BOOL },
    20: { alias: 'taxCalculated', type: Thrift.Type.BOOL },
    7: { alias: 'displayBaseCost', type: Thrift.Type.STRING },
    17: { alias: 'displaySubtotalNonTaxable', type: Thrift.Type.STRING },
    8: { alias: 'displayShippingCost', type: Thrift.Type.STRING },
    9: { alias: 'displayTaxCost', type: Thrift.Type.STRING },
    10: { alias: 'displayCashOnDeliveryCost', type: Thrift.Type.STRING },
    13: { alias: 'displayImportCost', type: Thrift.Type.STRING },
    11: { alias: 'displayTotalCost', type: Thrift.Type.STRING }
  });

  module.exports.CartCheckoutRequest = Thrift.Struct.define('CartCheckoutRequest',  {
    1: { alias: 'cartVersionId', type: Thrift.Type.I64 }
  });

  module.exports.ShipmentItem = Thrift.Struct.define('ShipmentItem',  {
    1: { alias: 'sku', type: Thrift.Type.STRING },
    2: { alias: 'quantity', type: Thrift.Type.I32 }
  });

  module.exports.OrderShipment = Thrift.Struct.define('OrderShipment',  {
    2: { alias: 'shipmentItems', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.ShipmentItem)  },
    3: { alias: 'shipmentStatus', type: Thrift.Type.I32 },
    4: { alias: 'trackingNumbers', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    5: { alias: 'trackingNumberUrls', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    6: { alias: 'carriers', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    7: { alias: 'internal', type: Thrift.Type.BOOL },
    1: { alias: 'trackingNumber', type: Thrift.Type.STRING }
  });

  module.exports.OrderItem = Thrift.Struct.define('OrderItem',  {
    1: { alias: 'sku', type: Thrift.Type.STRING },
    2: { alias: 'quantity', type: Thrift.Type.I32 },
    7: { alias: 'unitBasePrice', type: Thrift.Type.I32 },
    3: { alias: 'unitListPrice', type: Thrift.Type.I32 },
    4: { alias: 'unitTax', type: Thrift.Type.I32 },
    8: { alias: 'displayUnitBasePrice', type: Thrift.Type.STRING },
    5: { alias: 'displayUnitPrice', type: Thrift.Type.STRING },
    6: { alias: 'taxExemptionReason', type: Thrift.Type.STRING }
  });

  module.exports.Order = Thrift.Struct.define('Order',  {
    1: { alias: 'orderId', type: Thrift.Type.STRING },
    2: { alias: 'createDate', type: Thrift.Type.I64 },
    3: { alias: 'orderType', type: Thrift.Type.I32 },
    4: { alias: 'orderStatus', type: Thrift.Type.I32 },
    5: { alias: 'orderItems', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.OrderItem)  },
    6: { alias: 'contactEmail', type: Thrift.Type.STRING },
    7: { alias: 'contactPhone', type: Thrift.Type.STRING },
    8: { alias: 'shippingAddr', type: Thrift.Type.STRUCT, def: module.exports.UserAddress },
    29: { alias: 'paymentMethod', type: Thrift.Type.STRUCT, def: module.exports.PaymentMethod },
    9: { alias: 'orderShipments', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.OrderShipment)  },
    10: { alias: 'currency', type: Thrift.Type.STRING },
    11: { alias: 'baseCost', type: Thrift.Type.I32 },
    12: { alias: 'shippingCost', type: Thrift.Type.I32 },
    13: { alias: 'taxCost', type: Thrift.Type.I32 },
    28: { alias: 'taxRate', type: Thrift.Type.I32 },
    14: { alias: 'cashOnDeliveryCost', type: Thrift.Type.I32 },
    26: { alias: 'importCost', type: Thrift.Type.I32 },
    20: { alias: 'totalCost', type: Thrift.Type.I32 },
    15: { alias: 'commerceServiceType', type: Thrift.Type.I32 },
    16: { alias: 'fulfillmentServiceType', type: Thrift.Type.I32 },
    17: { alias: 'errorCode', type: Thrift.Type.I32 },
    18: { alias: 'errorReason', type: Thrift.Type.STRING },
    19: { alias: 'marketCountry', type: Thrift.Type.STRING },
    21: { alias: 'displayBaseCost', type: Thrift.Type.STRING },
    38: { alias: 'displaySubtotalNontaxableCost', type: Thrift.Type.STRING },
    39: { alias: 'displaySubtotalTaxableCost', type: Thrift.Type.STRING },
    22: { alias: 'displayShippingCost', type: Thrift.Type.STRING },
    23: { alias: 'displayTaxCost', type: Thrift.Type.STRING },
    24: { alias: 'displayCodCost', type: Thrift.Type.STRING },
    27: { alias: 'displayImportCost', type: Thrift.Type.STRING },
    25: { alias: 'displayTotalCost', type: Thrift.Type.STRING },
    30: { alias: 'businessTaxId', type: Thrift.Type.STRING },
    31: { alias: 'parentOrderId', type: Thrift.Type.STRING },
    32: { alias: 'childOrderIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    33: { alias: 'taxType', type: Thrift.Type.I32 },
    34: { alias: 'importDutyCalculated', type: Thrift.Type.BOOL },
    35: { alias: 'taxCalculated', type: Thrift.Type.BOOL },
    36: { alias: 'shippingSLA', type: Thrift.Type.STRUCT, def: module.exports.ShippingSLA },
    37: { alias: 'itemAvailabilityDate', type: Thrift.Type.I64 }
  });

  module.exports.CheckoutResult = Thrift.Struct.define('CheckoutResult',  {
    1: { alias: 'order', type: Thrift.Type.STRUCT, def: module.exports.Order }
  });

  module.exports.CommerceServiceDetail = Thrift.Struct.define('CommerceServiceDetail',  {
    1: { alias: 'type', type: Thrift.Type.I32 },
    2: { alias: 'label', type: Thrift.Type.I32 },
    3: { alias: 'hostedPageUrl', type: Thrift.Type.STRING }
  });

  module.exports.ShippingServiceLevelDetail = Thrift.Struct.define('ShippingServiceLevelDetail',  {
    1: { alias: 'level', type: Thrift.Type.I32 },
    2: { alias: 'estimatedMinDeliveryTimeInDays', type: Thrift.Type.I32 },
    3: { alias: 'estimatedMaxDeliveryTimeInDays', type: Thrift.Type.I32 },
    4: { alias: 'currency', type: Thrift.Type.STRING },
    5: { alias: 'estimatedCost', type: Thrift.Type.I32 },
    6: { alias: 'international', type: Thrift.Type.BOOL },
    7: { alias: 'estimatedImportCost', type: Thrift.Type.I32 },
    8: { alias: 'originCountry', type: Thrift.Type.STRING }
  });

  module.exports.ShippingCountryListFilter = Thrift.Struct.define('ShippingCountryListFilter',  {
    1: { alias: 'filterListType', type: Thrift.Type.I32 },
    2: { alias: 'countryCodeList', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  }
  });

  module.exports.CheckoutSegment = Thrift.Struct.define('CheckoutSegment',  {
    1: { alias: 'cartItems', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.CartItem)  },
    2: { alias: 'checkoutCost', type: Thrift.Type.STRUCT, def: module.exports.CheckoutCost },
    3: { alias: 'estimatedAvailabilityDate', type: Thrift.Type.I64 },
    4: { alias: 'shippingServiceLevel', type: Thrift.Type.I32 },
    5: { alias: 'availableShippingServiceLevelDetails', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.ShippingServiceLevelDetail)  },
    6: { alias: 'validationErrors', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.EXCEPTION)  },
    7: { alias: 'shippingSLA', type: Thrift.Type.STRUCT, def: module.exports.ShippingSLA },
    8: { alias: 'shipmentOriginCountry', type: Thrift.Type.STRING }
  });

  module.exports.CheckoutCart = Thrift.Struct.define('CheckoutCart',  {
    1: { alias: 'cartVersionId', type: Thrift.Type.I64 },
    2: { alias: 'requestCountry', type: Thrift.Type.STRING },
    3: { alias: 'requestLanguage', type: Thrift.Type.STRING },
    4: { alias: 'marketCountry', type: Thrift.Type.STRING },
    5: { alias: 'checkoutCost', type: Thrift.Type.STRUCT, def: module.exports.CheckoutCost },
    6: { alias: 'checkoutSegments', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.CheckoutSegment)  },
    7: { alias: 'validationErrors', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.EXCEPTION)  },
    8: { alias: 'removedItems', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.I32 )  }
  });

  module.exports.OrderTaxInformation = Thrift.Struct.define('OrderTaxInformation',  {
    1: { alias: 'fapiaoDeliveryRecord', type: Thrift.Type.STRUCT, def: module.exports.FapiaoDeliveryRecord }
  });

  module.exports.CheckoutContext = Thrift.Struct.define('CheckoutContext',  {
    1: { alias: 'existingShippingAddressId', type: Thrift.Type.I32 },
    2: { alias: 'shippingAddress', type: Thrift.Type.STRUCT, def: module.exports.UserAddress },
    3: { alias: 'existingPaymentMethodId', type: Thrift.Type.I32 },
    4: { alias: 'paymentMethod', type: Thrift.Type.STRUCT, def: module.exports.PaymentMethod },
    6: { alias: 'checkoutComment', type: Thrift.Type.STRING },
    7: { alias: 'commerceServiceType', type: Thrift.Type.I32 },
    8: { alias: 'businessTaxId', type: Thrift.Type.STRING },
    9: { alias: 'orderTaxInformation', type: Thrift.Type.STRUCT, def: module.exports.OrderTaxInformation }
  });

  module.exports.CheckoutSubmissionResult = Thrift.Struct.define('CheckoutSubmissionResult',  {
    1: { alias: 'orders', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.Order)  }
  });

  module.exports.USDExchangeRates = Thrift.Struct.define('USDExchangeRates',  {
    1: { alias: 'effectiveDate', type: Thrift.Type.I64 },
    2: { alias: 'rates', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.DOUBLE )  }
  });

  var Commerce = module.exports.Commerce = {};

  Commerce.getCartContents = Thrift.Method.define({
    alias: 'getCartContents',
    args: Thrift.Struct.define('getCartContentsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getCartContentsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Cart },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.resetCartContents = Thrift.Method.define({
    alias: 'resetCartContents',
    args: Thrift.Struct.define('resetCartContentsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'requestCountry', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'requestLanguage', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('resetCartContentsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Cart },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.resetCheckoutDetailsInCart = Thrift.Method.define({
    alias: 'resetCheckoutDetailsInCart',
    args: Thrift.Struct.define('resetCheckoutDetailsInCartArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('resetCheckoutDetailsInCartResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Cart },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.setCartContents = Thrift.Method.define({
    alias: 'setCartContents',
    args: Thrift.Struct.define('setCartContentsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cart', type: Thrift.Type.STRUCT, def: module.exports.Cart, index: 1 },
      3: { alias: 'forceVersionIdCheck', type: Thrift.Type.BOOL, index: 2 }
    }),
    result: Thrift.Struct.define('setCartContentsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Cart },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getUserAddresses = Thrift.Method.define({
    alias: 'getUserAddresses',
    args: Thrift.Struct.define('getUserAddressesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getUserAddressesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.UserAddress)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getPaymentEncryptionKey = Thrift.Method.define({
    alias: 'getPaymentEncryptionKey',
    args: Thrift.Struct.define('getPaymentEncryptionKeyArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getPaymentEncryptionKeyResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRING },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getPaymentMethods = Thrift.Method.define({
    alias: 'getPaymentMethods',
    args: Thrift.Struct.define('getPaymentMethodsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'commerceServices', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING), index: 1 },
      3: { alias: 'includePending', type: Thrift.Type.BOOL, index: 2 }
    }),
    result: Thrift.Struct.define('getPaymentMethodsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.PaymentMethod)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getSupportedCommerceServices = Thrift.Method.define({
    alias: 'getSupportedCommerceServices',
    args: Thrift.Struct.define('getSupportedCommerceServicesArgs', {
      1: { alias: 'requestCountry', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getSupportedCommerceServicesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.CommerceServiceDetail)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getSupportedPaymentOptions = Thrift.Method.define({
    alias: 'getSupportedPaymentOptions',
    args: Thrift.Struct.define('getSupportedPaymentOptionsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 }
    }),
    result: Thrift.Struct.define('getSupportedPaymentOptionsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.CommerceServiceDetail)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getSupportedPaymentOptionsSimple = Thrift.Method.define({
    alias: 'getSupportedPaymentOptionsSimple',
    args: Thrift.Struct.define('getSupportedPaymentOptionsSimpleArgs', {
      1: { alias: 'cart', type: Thrift.Type.STRUCT, def: module.exports.Cart, index: 0 }
    }),
    result: Thrift.Struct.define('getSupportedPaymentOptionsSimpleResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.CommerceServiceDetail)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getSupportedShippingServiceLevels = Thrift.Method.define({
    alias: 'getSupportedShippingServiceLevels',
    args: Thrift.Struct.define('getSupportedShippingServiceLevelsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 }
    }),
    result: Thrift.Struct.define('getSupportedShippingServiceLevelsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.ShippingServiceLevelDetail)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getSupportedShippingServiceLevelsSimple = Thrift.Method.define({
    alias: 'getSupportedShippingServiceLevelsSimple',
    args: Thrift.Struct.define('getSupportedShippingServiceLevelsSimpleArgs', {
      1: { alias: 'cart', type: Thrift.Type.STRUCT, def: module.exports.Cart, index: 0 },
      2: { alias: 'shippingAddress', type: Thrift.Type.STRUCT, def: module.exports.UserAddress, index: 1 }
    }),
    result: Thrift.Struct.define('getSupportedShippingServiceLevelsSimpleResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.ShippingServiceLevelDetail)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.estimateCartCheckoutCost = Thrift.Method.define({
    alias: 'estimateCartCheckoutCost',
    args: Thrift.Struct.define('estimateCartCheckoutCostArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 }
    }),
    result: Thrift.Struct.define('estimateCartCheckoutCostResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CheckoutCost },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.estimateCartCheckoutCostSimple = Thrift.Method.define({
    alias: 'estimateCartCheckoutCostSimple',
    args: Thrift.Struct.define('estimateCartCheckoutCostSimpleArgs', {
      1: { alias: 'cart', type: Thrift.Type.STRUCT, def: module.exports.Cart, index: 0 },
      2: { alias: 'shippingAddress', type: Thrift.Type.STRUCT, def: module.exports.UserAddress, index: 1 }
    }),
    result: Thrift.Struct.define('estimateCartCheckoutCostSimpleResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CheckoutCost },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.checkoutCart = Thrift.Method.define({
    alias: 'checkoutCart',
    args: Thrift.Struct.define('checkoutCartArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 }
    }),
    result: Thrift.Struct.define('checkoutCartResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CheckoutResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getMarketCountry = Thrift.Method.define({
    alias: 'getMarketCountry',
    args: Thrift.Struct.define('getMarketCountryArgs', {
      1: { alias: 'requestCountry', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getMarketCountryResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRING },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Commerce.getPendingPreorders = Thrift.Method.define({
    alias: 'getPendingPreorders',
    args: Thrift.Struct.define('getPendingPreordersArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getPendingPreordersResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.Order)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Commerce.cancelOrderByUser = Thrift.Method.define({
    alias: 'cancelOrderByUser',
    args: Thrift.Struct.define('cancelOrderByUserArgs', {
      1: { alias: 'orderId', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('cancelOrderByUserResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getOrderHistory = Thrift.Method.define({
    alias: 'getOrderHistory',
    args: Thrift.Struct.define('getOrderHistoryArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getOrderHistoryResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.Order)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getOrder = Thrift.Method.define({
    alias: 'getOrder',
    args: Thrift.Struct.define('getOrderArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'orderId', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('getOrderResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Order },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getChildOrders = Thrift.Method.define({
    alias: 'getChildOrders',
    args: Thrift.Struct.define('getChildOrdersArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'orderId', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('getChildOrdersResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.Order)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.createCartFromOrder = Thrift.Method.define({
    alias: 'createCartFromOrder',
    args: Thrift.Struct.define('createCartFromOrderArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'orderId', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('createCartFromOrderResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.addUserPaymentMethod = Thrift.Method.define({
    alias: 'addUserPaymentMethod',
    args: Thrift.Struct.define('addUserPaymentMethodArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'paymentMethod', type: Thrift.Type.STRUCT, def: module.exports.PaymentMethod, index: 1 }
    }),
    result: Thrift.Struct.define('addUserPaymentMethodResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.PaymentMethod },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.addUserPaymentMethodWithAuth = Thrift.Method.define({
    alias: 'addUserPaymentMethodWithAuth',
    args: Thrift.Struct.define('addUserPaymentMethodWithAuthArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'paymentMethod', type: Thrift.Type.STRUCT, def: module.exports.PaymentMethod, index: 1 }
    }),
    result: Thrift.Struct.define('addUserPaymentMethodWithAuthResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.PaymentMethod },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.removeUserPaymentMethod = Thrift.Method.define({
    alias: 'removeUserPaymentMethod',
    args: Thrift.Struct.define('removeUserPaymentMethodArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'paymentMethodId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('removeUserPaymentMethodResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.PaymentMethod },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.removeCyberSourcePaymentMethod = Thrift.Method.define({
    alias: 'removeCyberSourcePaymentMethod',
    args: Thrift.Struct.define('removeCyberSourcePaymentMethodArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('removeCyberSourcePaymentMethodResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Commerce.updatePaymentMethod = Thrift.Method.define({
    alias: 'updatePaymentMethod',
    args: Thrift.Struct.define('updatePaymentMethodArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'paymentMethodId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'billingAddress', type: Thrift.Type.STRUCT, def: module.exports.UserAddress, index: 2 },
      4: { alias: 'expirationMonth', type: Thrift.Type.BYTE, index: 3 },
      5: { alias: 'expirationYear', type: Thrift.Type.I16, index: 4 }
    }),
    result: Thrift.Struct.define('updatePaymentMethodResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.PaymentMethod },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.setDefaultUserPaymentMethod = Thrift.Method.define({
    alias: 'setDefaultUserPaymentMethod',
    args: Thrift.Struct.define('setDefaultUserPaymentMethodArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'paymentMethodId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'defaultForMarket', type: Thrift.Type.BOOL, index: 2 },
      4: { alias: 'defaultForPremium', type: Thrift.Type.BOOL, index: 3 }
    }),
    result: Thrift.Struct.define('setDefaultUserPaymentMethodResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.addUserAddress = Thrift.Method.define({
    alias: 'addUserAddress',
    args: Thrift.Struct.define('addUserAddressArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userAddress', type: Thrift.Type.STRUCT, def: module.exports.UserAddress, index: 1 }
    }),
    result: Thrift.Struct.define('addUserAddressResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.UserAddress },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.setUserContactPhone = Thrift.Method.define({
    alias: 'setUserContactPhone',
    args: Thrift.Struct.define('setUserContactPhoneArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userAddressId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'contactPhone', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('setUserContactPhoneResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.UserAddress },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.removeUserAddress = Thrift.Method.define({
    alias: 'removeUserAddress',
    args: Thrift.Struct.define('removeUserAddressArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userAddressId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('removeUserAddressResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.UserAddress },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.setDefaultUserAddress = Thrift.Method.define({
    alias: 'setDefaultUserAddress',
    args: Thrift.Struct.define('setDefaultUserAddressArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userAddressId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('setDefaultUserAddressResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getAddressSuggestion = Thrift.Method.define({
    alias: 'getAddressSuggestion',
    args: Thrift.Struct.define('getAddressSuggestionArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'country', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'language', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'postalCode', type: Thrift.Type.STRING, index: 3 }
    }),
    result: Thrift.Struct.define('getAddressSuggestionResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.UserAddress },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getShippingCountryListFilter = Thrift.Method.define({
    alias: 'getShippingCountryListFilter',
    args: Thrift.Struct.define('getShippingCountryListFilterArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 }
    }),
    result: Thrift.Struct.define('getShippingCountryListFilterResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.ShippingCountryListFilter },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getShippingCountryListFilterSimple = Thrift.Method.define({
    alias: 'getShippingCountryListFilterSimple',
    args: Thrift.Struct.define('getShippingCountryListFilterSimpleArgs', {
      1: { alias: 'cart', type: Thrift.Type.STRUCT, def: module.exports.Cart, index: 0 }
    }),
    result: Thrift.Struct.define('getShippingCountryListFilterSimpleResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.ShippingCountryListFilter },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.startEstimateShippingCost = Thrift.Method.define({
    alias: 'startEstimateShippingCost',
    args: Thrift.Struct.define('startEstimateShippingCostArgs', {
      1: { alias: 'cart', type: Thrift.Type.STRUCT, def: module.exports.Cart, index: 0 },
      2: { alias: 'shippingAddress', type: Thrift.Type.STRUCT, def: module.exports.UserAddress, index: 1 }
    }),
    result: Thrift.Struct.define('startEstimateShippingCostResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getCheckoutCart = Thrift.Method.define({
    alias: 'getCheckoutCart',
    args: Thrift.Struct.define('getCheckoutCartArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'checkoutContext', type: Thrift.Type.STRUCT, def: module.exports.CheckoutContext, index: 1 }
    }),
    result: Thrift.Struct.define('getCheckoutCartResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CheckoutCart },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.getSupportedPaymentMethods = Thrift.Method.define({
    alias: 'getSupportedPaymentMethods',
    args: Thrift.Struct.define('getSupportedPaymentMethodsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 },
      3: { alias: 'checkoutContext', type: Thrift.Type.STRUCT, def: module.exports.CheckoutContext, index: 2 }
    }),
    result: Thrift.Struct.define('getSupportedPaymentMethodsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.CommerceServiceDetail)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.updateCheckoutCartItem = Thrift.Method.define({
    alias: 'updateCheckoutCartItem',
    args: Thrift.Struct.define('updateCheckoutCartItemArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 },
      3: { alias: 'checkoutContext', type: Thrift.Type.STRUCT, def: module.exports.CheckoutContext, index: 2 },
      4: { alias: 'sku', type: Thrift.Type.STRING, index: 3 },
      5: { alias: 'quantity', type: Thrift.Type.I32, index: 4 }
    }),
    result: Thrift.Struct.define('updateCheckoutCartItemResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CheckoutCart },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.updateShippingServiceLevel = Thrift.Method.define({
    alias: 'updateShippingServiceLevel',
    args: Thrift.Struct.define('updateShippingServiceLevelArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 },
      3: { alias: 'checkoutContext', type: Thrift.Type.STRUCT, def: module.exports.CheckoutContext, index: 2 },
      4: { alias: 'cartItems', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.CartItem) , index: 3 },
      5: { alias: 'shippingServiceLevel', type: Thrift.Type.I32, index: 4 }
    }),
    result: Thrift.Struct.define('updateShippingServiceLevelResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CheckoutCart },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  Commerce.submitCheckoutCart = Thrift.Method.define({
    alias: 'submitCheckoutCart',
    args: Thrift.Struct.define('submitCheckoutCartArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'cartVersionId', type: Thrift.Type.I64, index: 1 },
      3: { alias: 'checkoutContext', type: Thrift.Type.STRUCT, def: module.exports.CheckoutContext, index: 2 },
      4: { alias: 'cartStateMd5Checksum', type: Thrift.Type.STRING, index: 3 }
    }),
    result: Thrift.Struct.define('submitCheckoutCartResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CheckoutSubmissionResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'marketException', type: Thrift.Type.EXCEPTION, def: MarketErrors.EDAMMarketException }
    })
  });

  // Define Commerce Client

  function CommerceClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  CommerceClient.prototype.getCartContents = function(authenticationToken, callback) {
    var mdef = Commerce.getCartContents;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.resetCartContents = function(authenticationToken, requestCountry, requestLanguage, callback) {
    var mdef = Commerce.resetCartContents;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.requestCountry = requestCountry;
    args.requestLanguage = requestLanguage;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.resetCheckoutDetailsInCart = function(authenticationToken, callback) {
    var mdef = Commerce.resetCheckoutDetailsInCart;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.setCartContents = function(authenticationToken, cart, forceVersionIdCheck, callback) {
    var mdef = Commerce.setCartContents;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cart = cart;
    args.forceVersionIdCheck = forceVersionIdCheck;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getUserAddresses = function(authenticationToken, callback) {
    var mdef = Commerce.getUserAddresses;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getPaymentEncryptionKey = function(authenticationToken, callback) {
    var mdef = Commerce.getPaymentEncryptionKey;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getPaymentMethods = function(authenticationToken, commerceServices, includePending, callback) {
    var mdef = Commerce.getPaymentMethods;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.commerceServices = commerceServices;
    args.includePending = includePending;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getSupportedCommerceServices = function(requestCountry, callback) {
    var mdef = Commerce.getSupportedCommerceServices;
    var args = new mdef.args();
    args.requestCountry = requestCountry;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getSupportedPaymentOptions = function(authenticationToken, cartVersionId, callback) {
    var mdef = Commerce.getSupportedPaymentOptions;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getSupportedPaymentOptionsSimple = function(cart, callback) {
    var mdef = Commerce.getSupportedPaymentOptionsSimple;
    var args = new mdef.args();
    args.cart = cart;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getSupportedShippingServiceLevels = function(authenticationToken, cartVersionId, callback) {
    var mdef = Commerce.getSupportedShippingServiceLevels;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getSupportedShippingServiceLevelsSimple = function(cart, shippingAddress, callback) {
    var mdef = Commerce.getSupportedShippingServiceLevelsSimple;
    var args = new mdef.args();
    args.cart = cart;
    args.shippingAddress = shippingAddress;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.estimateCartCheckoutCost = function(authenticationToken, cartVersionId, callback) {
    var mdef = Commerce.estimateCartCheckoutCost;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.estimateCartCheckoutCostSimple = function(cart, shippingAddress, callback) {
    var mdef = Commerce.estimateCartCheckoutCostSimple;
    var args = new mdef.args();
    args.cart = cart;
    args.shippingAddress = shippingAddress;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.checkoutCart = function(authenticationToken, cartVersionId, callback) {
    var mdef = Commerce.checkoutCart;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getMarketCountry = function(requestCountry, callback) {
    var mdef = Commerce.getMarketCountry;
    var args = new mdef.args();
    args.requestCountry = requestCountry;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getPendingPreorders = function(authenticationToken, callback) {
    var mdef = Commerce.getPendingPreorders;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.cancelOrderByUser = function(orderId, callback) {
    var mdef = Commerce.cancelOrderByUser;
    var args = new mdef.args();
    args.orderId = orderId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getOrderHistory = function(authenticationToken, callback) {
    var mdef = Commerce.getOrderHistory;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getOrder = function(authenticationToken, orderId, callback) {
    var mdef = Commerce.getOrder;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.orderId = orderId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getChildOrders = function(authenticationToken, orderId, callback) {
    var mdef = Commerce.getChildOrders;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.orderId = orderId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.createCartFromOrder = function(authenticationToken, orderId, callback) {
    var mdef = Commerce.createCartFromOrder;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.orderId = orderId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.addUserPaymentMethod = function(authenticationToken, paymentMethod, callback) {
    var mdef = Commerce.addUserPaymentMethod;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.paymentMethod = paymentMethod;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.addUserPaymentMethodWithAuth = function(authenticationToken, paymentMethod, callback) {
    var mdef = Commerce.addUserPaymentMethodWithAuth;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.paymentMethod = paymentMethod;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.removeUserPaymentMethod = function(authenticationToken, paymentMethodId, callback) {
    var mdef = Commerce.removeUserPaymentMethod;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.paymentMethodId = paymentMethodId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.removeCyberSourcePaymentMethod = function(authenticationToken, callback) {
    var mdef = Commerce.removeCyberSourcePaymentMethod;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.updatePaymentMethod = function(authenticationToken, paymentMethodId, billingAddress, expirationMonth, expirationYear, callback) {
    var mdef = Commerce.updatePaymentMethod;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.paymentMethodId = paymentMethodId;
    args.billingAddress = billingAddress;
    args.expirationMonth = expirationMonth;
    args.expirationYear = expirationYear;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.setDefaultUserPaymentMethod = function(authenticationToken, paymentMethodId, defaultForMarket, defaultForPremium, callback) {
    var mdef = Commerce.setDefaultUserPaymentMethod;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.paymentMethodId = paymentMethodId;
    args.defaultForMarket = defaultForMarket;
    args.defaultForPremium = defaultForPremium;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.addUserAddress = function(authenticationToken, userAddress, callback) {
    var mdef = Commerce.addUserAddress;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userAddress = userAddress;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.setUserContactPhone = function(authenticationToken, userAddressId, contactPhone, callback) {
    var mdef = Commerce.setUserContactPhone;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userAddressId = userAddressId;
    args.contactPhone = contactPhone;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.removeUserAddress = function(authenticationToken, userAddressId, callback) {
    var mdef = Commerce.removeUserAddress;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userAddressId = userAddressId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.setDefaultUserAddress = function(authenticationToken, userAddressId, callback) {
    var mdef = Commerce.setDefaultUserAddress;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userAddressId = userAddressId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getAddressSuggestion = function(authenticationToken, country, language, postalCode, callback) {
    var mdef = Commerce.getAddressSuggestion;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.country = country;
    args.language = language;
    args.postalCode = postalCode;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getShippingCountryListFilter = function(authenticationToken, cartVersionId, callback) {
    var mdef = Commerce.getShippingCountryListFilter;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getShippingCountryListFilterSimple = function(cart, callback) {
    var mdef = Commerce.getShippingCountryListFilterSimple;
    var args = new mdef.args();
    args.cart = cart;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.startEstimateShippingCost = function(cart, shippingAddress, callback) {
    var mdef = Commerce.startEstimateShippingCost;
    var args = new mdef.args();
    args.cart = cart;
    args.shippingAddress = shippingAddress;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getCheckoutCart = function(authenticationToken, checkoutContext, callback) {
    var mdef = Commerce.getCheckoutCart;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.checkoutContext = checkoutContext;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.getSupportedPaymentMethods = function(authenticationToken, cartVersionId, checkoutContext, callback) {
    var mdef = Commerce.getSupportedPaymentMethods;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    args.checkoutContext = checkoutContext;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.updateCheckoutCartItem = function(authenticationToken, cartVersionId, checkoutContext, sku, quantity, callback) {
    var mdef = Commerce.updateCheckoutCartItem;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    args.checkoutContext = checkoutContext;
    args.sku = sku;
    args.quantity = quantity;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.updateShippingServiceLevel = function(authenticationToken, cartVersionId, checkoutContext, cartItems, shippingServiceLevel, callback) {
    var mdef = Commerce.updateShippingServiceLevel;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    args.checkoutContext = checkoutContext;
    args.cartItems = cartItems;
    args.shippingServiceLevel = shippingServiceLevel;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommerceClient.prototype.submitCheckoutCart = function(authenticationToken, cartVersionId, checkoutContext, cartStateMd5Checksum, callback) {
    var mdef = Commerce.submitCheckoutCart;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.cartVersionId = cartVersionId;
    args.checkoutContext = checkoutContext;
    args.cartStateMd5Checksum = cartStateMd5Checksum;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.Commerce.Client = CommerceClient;

  // Define Commerce Server

  function CommerceServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in Commerce) {
        if (service[methodName]) {
          this.processor.addMethod(Commerce[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  CommerceServer.prototype.start = function () {
    this.stransport.listen();
  };
  CommerceServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.Commerce.Server = CommerceServer;


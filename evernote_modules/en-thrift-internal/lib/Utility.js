//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var Errors = require('./Errors');
  var Types = require('./Types');
  var MessageStore = require('./MessageStore');
  var NoteStore = require('./NoteStore');
  var AuthenticationTypes = require('./AuthenticationTypes');
  var SpaceService = require('./SpaceService');


  module.exports.MarketingEmailType = {
    'DESKTOP_UPSELL' : 1,
    'CLIPPER_UPSELL' : 2,
    'MOBILE_UPSELL' : 3
  };

  module.exports.TsdType = {
    'REGULAR_TSD' : 1,
    'TARGETED_UPSELL' : 2
  };

  module.exports.TsdTiming = {
    'SUITABLE' : 1,
    'BEFORE_FLE' : 2,
    'AFTER_FLE' : 3,
    'IMMEDIATELY' : 4,
    'NOTE_CLOSE' : 5
  };

  module.exports.TsdVariation = {
    'DIALOG_VAR1' : 1,
    'FULLSCREEN1BUTTON_DISMISS' : 2,
    'FULLSCREEN1BUTTON_NODISMISS' : 3,
    'FULLSCREEN1BUTTON_TIERPATH' : 4,
    'FULLSCREEN1BUTTON_VAR2' : 5,
    'FULLSCREEN3BUTTONS_DEFAULT' : 6,
    'FULLSCREEN3BUTTONS_DISMISS' : 7,
    'FULLSCREEN3BUTTONS_NODISMISS' : 8,
    'FULLSCREEN3BUTTONS_BEFOREFLE' : 14,
    'MODAL_DEFAULT' : 9,
    'NOTIFICATION_ASPIRATIONAL' : 10,
    'NOTIFICATION_STORAGE' : 11,
    'SHEET_ASPIRATIONAL' : 12,
    'SHEET_STORAGE' : 13,
    'BANNER_LEARNMORE' : 16,
    'BANNER_UPGRADE' : 17,
    'FULLSCREEN_SINGLESDAY' : 18,
    'FULLSCREEN_DISCOUNT' : 19,
    'FULLSCREEN_NEWYEAR' : 20,
    'TEST_UNSUPPORTED' : 15
  };

  module.exports.IncentiveType = {
    'GNOME_FIFTY_PERCENT_OFF' : 1,
    'GNOME_TWENTY_FIVE_PERCENT_OFF' : 2,
    'GNOME_FORTY_PERCENT_OFF' : 3,
    'GNOME_TEN_PERCENT_OFF' : 4,
    'GNOME_ONE_MONTH_TRIAL' : 5,
    'GNOME_THREE_MONTHS_FREE' : 6,
    'GNOME_SIX_MONTHS_FREE' : 7
  };

  module.exports.RelatedContentSourceType = {
    'NEWS' : 1,
    'PROFILE' : 2,
    'REFERENCE' : 3
  };

  module.exports.NsvcTokenType = {
    'MOBILE_DEFAULT' : 0,
    'MOBILE_NEUTRON_IOS' : 1,
    'MOBILE_NEUTRON_ANDROID' : 2,
    'IN_APP_ION' : 3,
    'IN_APP_BORON_MAC' : 4,
    'IN_APP_BORON_WIN' : 5,
    'IN_APP_BORON_LINUX' : 6,
    'PUSH_ION' : 7,
    'PUSH_BORON_MAC' : 8,
    'PUSH_BORON_WIN' : 9,
    'PUSH_BORON_LINUX' : 10
  };

  module.exports.SurveyEntityType = {
    'NOTE' : 1,
    'NOTEBOOK' : 2
  };

  module.exports.SurveyStatus = {
    'OPEN' : 0,
    'FINALIZED' : 1,
    'CLOSED' : 100
  };

  module.exports.SurveyItemStatus = {
    'OPEN' : 0,
    'FINALIZED' : 1
  };

  module.exports.FeatureKey = {
    'WORKSPACES' : 0,
    'AUDITING' : 1,
    'RTE' : 2,
    'BOARDVIEW' : 3,
    'TASKS' : 4,
    'PESO' : 5,
    'SEARCH_V4' : 6,
    'REMINDERS' : 7,
    'ION_INK_SKETCH' : 8,
    'HOME' : 9,
    'WORKCHAT' : 10,
    'BOB_SEPARATION' : 11,
    'TASKS_2020' : 12,
    'CALENDAR_INTEGRATION_MVP' : 13
  };

  module.exports.BetaFeatureEnrollmentStatus = {
    'WAITLISTED' : 0,
    'ENROLLED' : 1,
    'ENABLED' : 2,
    'DISABLED' : 3
  };

  module.exports.PinnedEntityType = {
    'NOTE' : 0,
    'NOTEBOOK' : 1,
    'EXTERNAL' : 2
  };

  module.exports.MmsvcClientType = {
    'UNKNOWN' : 0,
    'ION' : 1,
    'NEUTRON_IOS' : 2,
    'NEUTRON_ANDROID' : 3,
    'BORON_MAC' : 4,
    'BORON_WIN' : 5
  };

  module.exports.OAUTH_CREDENTIAL_SERVICE_GOOGLE_CONNECT = 1;

  module.exports.OAUTH_CREDENTIAL_SERVICE_GOOGLE_GLASS = 2;

  module.exports.OAUTH_CREDENTIAL_SERVICE_FACEBOOK = 3;

  module.exports.OAUTH_CREDENTIAL_SERVICE_LINKEDIN = 4;

  module.exports.OAUTH_CREDENTIAL_SERVICE_WSJ = 5;

  module.exports.OAUTH_CREDENTIAL_SERVICE_NIKKEI = 6;

  module.exports.OAUTH_CREDENTIAL_SERVICE_SALESFORCE = 7;

  module.exports.OAUTH_CREDENTIAL_SERVICE_IDS = [1,2,3,4,5,6,7];

  module.exports.OAUTH_CREDENTIAL_SCOPE_GOOGLE_CONTACTS = '/m8/feeds';

  module.exports.OAUTH_CREDENTIAL_SCOPE_GOOGLE_DRIVE = '/auth/drive';

  module.exports.OAUTH_CREDENTIAL_SCOPE_GOOGLE_CALENDAR = '/auth/calendar';

  module.exports.OPENID_SCOPE_GOOGLE_OPENID = 'openid';

  module.exports.OPENID_SCOPE_GOOGLE_EMAIL = 'email';

  module.exports.OPENID_SCOPE_GOOGLE_PROFILE = 'profile';

  module.exports.OAUTH_CREDENTIAL_GOOGLE_SCOPES = ['/m8/feeds','/auth/drive','/auth/calendar'];

  module.exports.OPENID_SCOPES_GOOGLE = ['openid','email','profile'];

  module.exports.EDAM_OAUTH_SCOPE_LEN_MAX = 4096;

  module.exports.EDAM_OAUTH_SCOPE_LEN_MIN = 0;

  module.exports.EDAM_OAUTH_VERSION_1 = 1;

  module.exports.EDAM_OAUTH_VERSION_2 = 2;

  module.exports.EDAM_OAUTH_VERSIONS = [1,2];

  module.exports.MAX_SERVICE_UPDATED_FROM_NOTES_REQUEST_SIZE_LIMIT = 32;

  module.exports.EDAM_CLIENT_TYPE_ION = 'ion';

  module.exports.EDAM_CLIENT_TYPE_BORON = 'boron';

  module.exports.EDAM_CLIENT_TYPE_DASHBOARDS = 'dashboards';

  module.exports.EDAM_CLIENT_TYPES = ['ion','boron','dashboards'];

  module.exports.SPACE_FLE_VIEW_SPACE_PROMPT = 'onboarding_ViewSpace_Prompt';

  module.exports.SPACE_FLE_VIEW_SPACE_INTRO = 'onboarding_ViewSpace_Intro';

  module.exports.SPACE_FLE_VIEW_DIRECTORY_INTRO = 'onboarding_SpaceDirectory_Intro';

  module.exports.SPACE_FLE_KEYS = ['onboarding_ViewSpace_Prompt','onboarding_ViewSpace_Intro','onboarding_SpaceDirectory_Intro'];

  module.exports.SupportTicket = Thrift.Struct.define('SupportTicket',  {
    1: { alias: 'applicationVersion', type: Thrift.Type.STRING },
    2: { alias: 'contactEmail', type: Thrift.Type.STRING },
    3: { alias: 'osInfo', type: Thrift.Type.STRING },
    4: { alias: 'deviceInfo', type: Thrift.Type.STRING },
    5: { alias: 'carrierInfo', type: Thrift.Type.STRING },
    6: { alias: 'connectionInfo', type: Thrift.Type.STRING },
    7: { alias: 'logFile', type: Thrift.Type.STRUCT, def: Types.Data },
    8: { alias: 'subject', type: Thrift.Type.STRING },
    9: { alias: 'issueDescription', type: Thrift.Type.STRING },
    10: { alias: 'tags', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  }
  });

  module.exports.AppFeedback = Thrift.Struct.define('AppFeedback',  {
    1: { alias: 'rating', type: Thrift.Type.BYTE },
    2: { alias: 'feedback', type: Thrift.Type.STRUCT, def: module.exports.SupportTicket },
    3: { alias: 'requestFollowup', type: Thrift.Type.BOOL },
    4: { alias: 'ratingPerformance', type: Thrift.Type.BYTE },
    5: { alias: 'ratingFeatures', type: Thrift.Type.BYTE },
    6: { alias: 'ratingStability', type: Thrift.Type.BYTE },
    7: { alias: 'ratingEaseOfUse', type: Thrift.Type.BYTE },
    8: { alias: 'ratingTranslation', type: Thrift.Type.BYTE }
  });

  module.exports.MarketingEmailParameters = Thrift.Struct.define('MarketingEmailParameters',  {
    1: { alias: 'marketingEmailType', type: Thrift.Type.I32 }
  });

  module.exports.CrossPromotionInfo = Thrift.Struct.define('CrossPromotionInfo',  {
    1: { alias: 'usesEvernoteWindows', type: Thrift.Type.BOOL },
    2: { alias: 'usesEvernoteMac', type: Thrift.Type.BOOL },
    3: { alias: 'usesEvernoteIOS', type: Thrift.Type.BOOL },
    4: { alias: 'usesEvernoteAndroid', type: Thrift.Type.BOOL },
    5: { alias: 'usesWebClipper', type: Thrift.Type.BOOL },
    6: { alias: 'usesClearly', type: Thrift.Type.BOOL },
    7: { alias: 'usesFoodIOS', type: Thrift.Type.BOOL },
    8: { alias: 'usesFoodAndroid', type: Thrift.Type.BOOL },
    9: { alias: 'usesPenultimateIOS', type: Thrift.Type.BOOL },
    10: { alias: 'usesSkitchWindows', type: Thrift.Type.BOOL },
    11: { alias: 'usesSkitchMac', type: Thrift.Type.BOOL },
    12: { alias: 'usesSkitchIOS', type: Thrift.Type.BOOL },
    13: { alias: 'usesSkitchAndroid', type: Thrift.Type.BOOL },
    14: { alias: 'usesEvernoteSalesforce', type: Thrift.Type.BOOL }
  });

  module.exports.FriendReferral = Thrift.Struct.define('FriendReferral',  {
    1: { alias: 'created', type: Thrift.Type.I64 },
    2: { alias: 'email', type: Thrift.Type.STRING },
    3: { alias: 'referredUserId', type: Thrift.Type.I32 },
    4: { alias: 'pointsEarned', type: Thrift.Type.I32 }
  });

  module.exports.OAuthCredential = Thrift.Struct.define('OAuthCredential',  {
    1: { alias: 'serviceId', type: Thrift.Type.I16 },
    2: { alias: 'oAuthVersion', type: Thrift.Type.I16 },
    3: { alias: 'accessToken', type: Thrift.Type.STRING },
    4: { alias: 'scope', type: Thrift.Type.STRING },
    5: { alias: 'created', type: Thrift.Type.I64 },
    6: { alias: 'updated', type: Thrift.Type.I64 },
    7: { alias: 'expires', type: Thrift.Type.I64 },
    8: { alias: 'refreshAfter', type: Thrift.Type.I64 },
    9: { alias: 'instanceUrl', type: Thrift.Type.STRING },
    10: { alias: 'email', type: Thrift.Type.STRING },
    11: { alias: 'id', type: Thrift.Type.STRING },
    12: { alias: 'name', type: Thrift.Type.STRING }
  });

  module.exports.RelatedContentSourcePreference = Thrift.Struct.define('RelatedContentSourcePreference',  {
    1: { alias: 'sourceId', type: Thrift.Type.STRING },
    2: { alias: 'activated', type: Thrift.Type.BOOL },
    3: { alias: 'sourceName', type: Thrift.Type.STRING },
    4: { alias: 'sourceUrl', type: Thrift.Type.STRING },
    5: { alias: 'faviconUrl', type: Thrift.Type.STRING },
    6: { alias: 'sourceDescription', type: Thrift.Type.STRING },
    7: { alias: 'sourceType', type: Thrift.Type.I32 }
  });

  module.exports.RelatedContentProfile = Thrift.Struct.define('RelatedContentProfile',  {
    1: { alias: 'id', type: Thrift.Type.STRING },
    2: { alias: 'sourceId', type: Thrift.Type.STRING },
    3: { alias: 'userId', type: Thrift.Type.I32 },
    4: { alias: 'type', type: Thrift.Type.I32 },
    5: { alias: 'fullName', type: Thrift.Type.STRING },
    6: { alias: 'callingName', type: Thrift.Type.STRING },
    7: { alias: 'photoUrl', type: Thrift.Type.STRING },
    8: { alias: 'shortDescription', type: Thrift.Type.STRING },
    9: { alias: 'longDescription', type: Thrift.Type.STRING },
    10: { alias: 'contactUrls', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    11: { alias: 'organizations', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.STRING )  }
  });

  module.exports.RelatedContentProfilePage = Thrift.Struct.define('RelatedContentProfilePage',  {
    1: { alias: 'relatedContentProfile', type: Thrift.Type.STRUCT, def: module.exports.RelatedContentProfile },
    2: { alias: 'userProfile', type: Thrift.Type.STRUCT, def: Types.UserProfile }
  });

  module.exports.PromotionStatus = Thrift.Struct.define('PromotionStatus',  {
    1: { alias: 'promotionId', type: Thrift.Type.STRING },
    2: { alias: 'optedOut', type: Thrift.Type.BOOL },
    3: { alias: 'shownCount', type: Thrift.Type.I32 },
    4: { alias: 'timeLastShown', type: Thrift.Type.I64 }
  });

  module.exports.RealTimeAuthentication = Thrift.Struct.define('RealTimeAuthentication',  {
    1: { alias: 'authenticationToken', type: Thrift.Type.STRING }
  });

  module.exports.RealTimePing = Thrift.Struct.define('RealTimePing');

  module.exports.RealTimeRequest = Thrift.Struct.define('RealTimeRequest',  {
    1: { alias: 'realTimeAuthentication', type: Thrift.Type.STRUCT, def: module.exports.RealTimeAuthentication },
    2: { alias: 'realTimePing', type: Thrift.Type.STRUCT, def: module.exports.RealTimePing }
  });

  module.exports.RealTimeAuthenticationResult = Thrift.Struct.define('RealTimeAuthenticationResult',  {
    1: { alias: 'pingFrequency', type: Thrift.Type.I16 },
    2: { alias: 'userMaxMessageEventId', type: Thrift.Type.I64 }
  });

  module.exports.RealTimeNotePermissionsResult = Thrift.Struct.define('RealTimeNotePermissionsResult',  {
    1: { alias: 'userId', type: Thrift.Type.I32 },
    2: { alias: 'byOwnerToken', type: Thrift.Type.STRUCT, def: Types.NoteRestrictions },
    3: { alias: 'byBusinessToken', type: Thrift.Type.STRUCT, def: Types.NoteRestrictions }
  });

  module.exports.MessageNotification = Thrift.Struct.define('MessageNotification',  {
    1: { alias: 'syncChunk', type: Thrift.Type.STRUCT, def: MessageStore.MessageSyncChunk },
    2: { alias: 'previousEventId', type: Thrift.Type.I64 }
  });

  module.exports.RealTimeNotification = Thrift.Struct.define('RealTimeNotification',  {
    1: { alias: 'authenticationResult', type: Thrift.Type.STRUCT, def: module.exports.RealTimeAuthenticationResult },
    2: { alias: 'messageNotification', type: Thrift.Type.STRUCT, def: module.exports.MessageNotification },
    3: { alias: 'realTimePing', type: Thrift.Type.STRUCT, def: module.exports.RealTimePing }
  });

  module.exports.MessagingInvitation = Thrift.Struct.define('MessagingInvitation',  {
    1: { alias: 'id', type: Thrift.Type.STRING },
    2: { alias: 'senderUserId', type: Thrift.Type.I32 },
    3: { alias: 'senderFullName', type: Thrift.Type.STRING },
    4: { alias: 'senderPhoto', type: Thrift.Type.BINARY },
    5: { alias: 'invitedIdentityId', type: Thrift.Type.I64 },
    6: { alias: 'invitedContactId', type: Thrift.Type.STRING },
    7: { alias: 'invitedContactType', type: Thrift.Type.I32 },
    8: { alias: 'msgCount', type: Thrift.Type.I32 },
    9: { alias: 'firstMsgSentAt', type: Thrift.Type.I64 },
    10: { alias: 'created', type: Thrift.Type.I64 },
    11: { alias: 'threadId', type: Thrift.Type.I64 }
  });

  module.exports.TeamStarterPackRequest = Thrift.Struct.define('TeamStarterPackRequest',  {
    1: { alias: 'commerceService', type: Thrift.Type.STRING },
    2: { alias: 'appStoreLocale', type: Thrift.Type.STRING }
  });

  module.exports.TeamStarterPackResult = Thrift.Struct.define('TeamStarterPackResult',  {
    1: { alias: 'canPurchaseTeamStarterPack', type: Thrift.Type.BOOL },
    2: { alias: 'sku', type: Thrift.Type.STRING },
    3: { alias: 'seats', type: Thrift.Type.I32 },
    4: { alias: 'months', type: Thrift.Type.I32 }
  });

  module.exports.TierSelectionDisplayEligibilityRequest = Thrift.Struct.define('TierSelectionDisplayEligibilityRequest',  {
    1: { alias: 'numSessionsLast7Days', type: Thrift.Type.I32 },
    2: { alias: 'numSessionsLast30Days', type: Thrift.Type.I32 },
    3: { alias: 'numDaysActiveLast7Days', type: Thrift.Type.I32 },
    4: { alias: 'numDaysActiveLast30Days', type: Thrift.Type.I32 },
    5: { alias: 'teamStarterPackRequest', type: Thrift.Type.STRUCT, def: module.exports.TeamStarterPackRequest }
  });

  module.exports.TierSelectionDisplayEligibilityResult = Thrift.Struct.define('TierSelectionDisplayEligibilityResult',  {
    1: { alias: 'shouldShowTsd', type: Thrift.Type.BOOL },
    2: { alias: 'timeToLive', type: Thrift.Type.I64 },
    3: { alias: 'tsdType', type: Thrift.Type.I32 },
    4: { alias: 'tsdTiming', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.I32) },
    5: { alias: 'tsdVariation', type: Thrift.Type.I32 },
    6: { alias: 'subscriptionInfo', type: Thrift.Type.STRUCT, def: Types.SubscriptionInfo },
    7: { alias: 'teamStarterPackResult', type: Thrift.Type.STRUCT, def: module.exports.TeamStarterPackResult }
  });

  module.exports.MoveNotebookBetweenAccountsParams = Thrift.Struct.define('MoveNotebookBetweenAccountsParams',  {
    1: { alias: 'sourceNotebookGuid', type: Thrift.Type.STRING }
  });

  module.exports.MoveNotebooksBetweenAccountsParams = Thrift.Struct.define('MoveNotebooksBetweenAccountsParams',  {
    1: { alias: 'sourceNotebookGuids', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    2: { alias: 'preserveSourceNotes', type: Thrift.Type.BOOL }
  });

  module.exports.MoveNotebooksBetweenAccountsError = Thrift.Struct.define('MoveNotebooksBetweenAccountsError',  {
    1: { alias: 'notebookGuid', type: Thrift.Type.STRING },
    2: { alias: 'errorCode', type: Thrift.Type.I32 },
    3: { alias: 'parameter', type: Thrift.Type.STRING }
  });

  module.exports.MoveNotebooksBetweenAccountsResult = Thrift.Struct.define('MoveNotebooksBetweenAccountsResult',  {
    1: { alias: 'createdNotebooks', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, Types.Notebook)  },
    2: { alias: 'failures', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.MoveNotebooksBetweenAccountsError)  }
  });

  module.exports.MoveNoteBetweenAccountsParams = Thrift.Struct.define('MoveNoteBetweenAccountsParams',  {
    1: { alias: 'sourceNoteGuid', type: Thrift.Type.STRING },
    2: { alias: 'targetNotebookGuid', type: Thrift.Type.STRING }
  });

  module.exports.MoveNoteBetweenAccountsResult = Thrift.Struct.define('MoveNoteBetweenAccountsResult',  {
    1: { alias: 'sourceNote', type: Thrift.Type.STRUCT, def: Types.Note },
    2: { alias: 'createdNote', type: Thrift.Type.STRUCT, def: Types.Note }
  });

  module.exports.IncentiveEligibilityResult = Thrift.Struct.define('IncentiveEligibilityResult',  {
    1: { alias: 'eligibleForIncentive', type: Thrift.Type.BOOL },
    2: { alias: 'timeToLive', type: Thrift.Type.I64 },
    3: { alias: 'incentiveType', type: Thrift.Type.I32 },
    4: { alias: 'promoCode', type: Thrift.Type.STRING },
    5: { alias: 'promoSig', type: Thrift.Type.STRING }
  });

  module.exports.ConfigValuesRequest = Thrift.Struct.define('ConfigValuesRequest',  {
    1: { alias: 'keys', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING) }
  });

  module.exports.NsvcThirdPartyAuthorizationTokenResult = Thrift.Struct.define('NsvcThirdPartyAuthorizationTokenResult',  {
    1: { alias: 'token', type: Thrift.Type.STRING },
    2: { alias: 'expiresAt', type: Thrift.Type.I64 }
  });

  module.exports.SurveyItemRating = Thrift.Struct.define('SurveyItemRating',  {
    1: { alias: 'surveyItemId', type: Thrift.Type.I32 },
    2: { alias: 'userId', type: Thrift.Type.I32 },
    3: { alias: 'created', type: Thrift.Type.I64 },
    4: { alias: 'updated', type: Thrift.Type.I64 },
    5: { alias: 'rating', type: Thrift.Type.I32 },
    6: { alias: 'comment', type: Thrift.Type.STRING }
  });

  module.exports.SurveyItemComment = Thrift.Struct.define('SurveyItemComment',  {
    1: { alias: 'surveyItemId', type: Thrift.Type.I32 },
    2: { alias: 'userId', type: Thrift.Type.I32 },
    3: { alias: 'created', type: Thrift.Type.I64 },
    4: { alias: 'updated', type: Thrift.Type.I64 },
    5: { alias: 'comment', type: Thrift.Type.STRING }
  });

  module.exports.Survey = Thrift.Struct.define('Survey',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'entityType', type: Thrift.Type.I32 },
    3: { alias: 'entityGuid', type: Thrift.Type.STRING },
    4: { alias: 'name', type: Thrift.Type.STRING },
    5: { alias: 'descriptionNoteGuid', type: Thrift.Type.STRING },
    6: { alias: 'isAnonymous', type: Thrift.Type.BOOL },
    7: { alias: 'useNoteForDescription', type: Thrift.Type.BOOL },
    8: { alias: 'openDate', type: Thrift.Type.I64 },
    9: { alias: 'closeDate', type: Thrift.Type.I64 },
    10: { alias: 'status', type: Thrift.Type.I32 },
    11: { alias: 'created', type: Thrift.Type.I64 },
    12: { alias: 'updated', type: Thrift.Type.I64 },
    13: { alias: 'userId', type: Thrift.Type.I32 }
  });

  module.exports.SurveyItem = Thrift.Struct.define('SurveyItem',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'surveyId', type: Thrift.Type.I32 },
    3: { alias: 'entityType', type: Thrift.Type.I32 },
    4: { alias: 'entityGuid', type: Thrift.Type.STRING },
    5: { alias: 'status', type: Thrift.Type.I32 },
    6: { alias: 'sentimentScore', type: Thrift.Type.DOUBLE },
    7: { alias: 'category', type: Thrift.Type.STRING },
    8: { alias: 'ratings', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.SurveyItemRating)  },
    9: { alias: 'created', type: Thrift.Type.I64 },
    10: { alias: 'updated', type: Thrift.Type.I64 },
    11: { alias: 'comments', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.SurveyItemComment)  }
  });

  module.exports.FeatureAvailability = Thrift.Struct.define('FeatureAvailability',  {
    1: { alias: 'featureKey', type: Thrift.Type.I32 },
    2: { alias: 'isAvailable', type: Thrift.Type.BOOL }
  });

  module.exports.BetaFeature = Thrift.Struct.define('BetaFeature',  {
    1: { alias: 'guid', type: Thrift.Type.STRING },
    2: { alias: 'featureKey', type: Thrift.Type.STRING },
    3: { alias: 'name', type: Thrift.Type.STRING },
    4: { alias: 'featureDescription', type: Thrift.Type.STRING },
    5: { alias: 'help', type: Thrift.Type.STRING },
    6: { alias: 'requireWaitlist', type: Thrift.Type.BOOL },
    7: { alias: 'notificationsEnabled', type: Thrift.Type.BOOL }
  });

  module.exports.BetaFeatureEnrollment = Thrift.Struct.define('BetaFeatureEnrollment',  {
    1: { alias: 'guid', type: Thrift.Type.STRING },
    2: { alias: 'featureGuid', type: Thrift.Type.STRING },
    3: { alias: 'featureKey', type: Thrift.Type.STRING },
    4: { alias: 'userId', type: Thrift.Type.I32 },
    5: { alias: 'businessId', type: Thrift.Type.I32 },
    6: { alias: 'status', type: Thrift.Type.I32 },
    7: { alias: 'enrollerName', type: Thrift.Type.STRING },
    8: { alias: 'disabledDate', type: Thrift.Type.I64 }
  });

  module.exports.BetaFeatureEnrollmentMapping = Thrift.Struct.define('BetaFeatureEnrollmentMapping',  {
    1: { alias: 'enrollments', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.I32) }
  });

  module.exports.ResourcesUpdateRequest = Thrift.Struct.define('ResourcesUpdateRequest',  {
    1: { alias: 'deactivateResourcesWithBodyHashes', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING) },
    2: { alias: 'activateResourcesWithBodyHashes', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING) }
  });

  module.exports.ResourcesCreateRequest = Thrift.Struct.define('ResourcesCreateRequest',  {
    1: { alias: 'activateResourcesWithBodyHashes', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING) }
  });

  module.exports.NoteCardMetadata = Thrift.Struct.define('NoteCardMetadata',  {
    1: { alias: 'noteGuid', type: Thrift.Type.STRING },
    2: { alias: 'noteTitle', type: Thrift.Type.STRING },
    3: { alias: 'lastEdited', type: Thrift.Type.I64 },
    4: { alias: 'lastEditorName', type: Thrift.Type.STRING },
    5: { alias: 'snippet', type: Thrift.Type.STRING },
    6: { alias: 'lastEditorPhotoUrl', type: Thrift.Type.STRING },
    7: { alias: 'noteThumbnailUrl', type: Thrift.Type.STRING },
    8: { alias: 'notebookGuid', type: Thrift.Type.STRING }
  });

  module.exports.RecommendedNoteCardMetadata = Thrift.Struct.define('RecommendedNoteCardMetadata',  {
    1: { alias: 'noteCard', type: Thrift.Type.STRUCT, def: module.exports.NoteCardMetadata },
    2: { alias: 'jsonReason', type: Thrift.Type.STRING },
    3: { alias: 'connectedBy', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.NoteCardMetadata)  },
    4: { alias: 'workspace', type: Thrift.Type.STRUCT, def: SpaceService.Workspace },
    5: { alias: 'isAccessible', type: Thrift.Type.BOOL }
  });

  module.exports.RecommendationRequest = Thrift.Struct.define('RecommendationRequest',  {
    1: { alias: 'workspaceGuid', type: Thrift.Type.STRING },
    2: { alias: 'profile', type: Thrift.Type.STRING },
    3: { alias: 'engine', type: Thrift.Type.STRING }
  });

  module.exports.RecommendedNoteCardMetadataRequest = Thrift.Struct.define('RecommendedNoteCardMetadataRequest',  {
    1: { alias: 'noteGuids', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  }
  });

  module.exports.PinnedContent = Thrift.Struct.define('PinnedContent',  {
    1: { alias: 'workspaceGuid', type: Thrift.Type.STRING },
    2: { alias: 'entityType', type: Thrift.Type.I32 },
    3: { alias: 'entityGuid', type: Thrift.Type.STRING },
    4: { alias: 'entityUri', type: Thrift.Type.STRING },
    5: { alias: 'entityTitle', type: Thrift.Type.STRING },
    6: { alias: 'entityParentGuid', type: Thrift.Type.STRING },
    7: { alias: 'serviceCreated', type: Thrift.Type.I64 },
    8: { alias: 'serviceUpdated', type: Thrift.Type.I64 },
    9: { alias: 'guid', type: Thrift.Type.STRING },
    10: { alias: 'sortIndex', type: Thrift.Type.I32 }
  });

  module.exports.ChangePositionRequest = Thrift.Struct.define('ChangePositionRequest',  {
    1: { alias: 'guid', type: Thrift.Type.STRING },
    2: { alias: 'referencePosition', type: Thrift.Type.STRING }
  });

  module.exports.NotebookSummary = Thrift.Struct.define('NotebookSummary',  {
    1: { alias: 'notebookGuid', type: Thrift.Type.STRING },
    2: { alias: 'notebookName', type: Thrift.Type.STRING },
    3: { alias: 'noteCount', type: Thrift.Type.I32 }
  });

  module.exports.RegisterDeviceSessionRequest = Thrift.Struct.define('RegisterDeviceSessionRequest',  {
    1: { alias: 'authenticationToken', type: Thrift.Type.STRING },
    2: { alias: 'deviceDescription', type: Thrift.Type.STRING },
    3: { alias: 'deviceIdentifier', type: Thrift.Type.STRING },
    4: { alias: 'clientId', type: Thrift.Type.STRING },
    5: { alias: 'refreshToken', type: Thrift.Type.STRING },
    6: { alias: 'consumerKey', type: Thrift.Type.STRING }
  });

  module.exports.HasActiveSessionRequest = Thrift.Struct.define('HasActiveSessionRequest',  {
    1: { alias: 'authenticationToken', type: Thrift.Type.STRING },
    2: { alias: 'deviceIdentifier', type: Thrift.Type.STRING },
    3: { alias: 'clientId', type: Thrift.Type.STRING },
    4: { alias: 'consumerKey', type: Thrift.Type.STRING }
  });

  module.exports.MmsvcRequest = Thrift.Struct.define('MmsvcRequest',  {
    1: { alias: 'clientType', type: Thrift.Type.I32 }
  });

  module.exports.MmsvcCreateSyncRequest = Thrift.Struct.define('MmsvcCreateSyncRequest',  {
    1: { alias: 'userId', type: Thrift.Type.STRING }
  });

  module.exports.MmsvcResponse = Thrift.Struct.define('MmsvcResponse',  {
    1: { alias: 'jsonResponse', type: Thrift.Type.STRING }
  });

  module.exports.RevokeSessionRequest = Thrift.Struct.define('RevokeSessionRequest',  {
    1: { alias: 'authenticationToken', type: Thrift.Type.STRING },
    2: { alias: 'deviceIdentifier', type: Thrift.Type.STRING },
    3: { alias: 'clientId', type: Thrift.Type.STRING },
    4: { alias: 'consumerKey', type: Thrift.Type.STRING }
  });

  var Utility = module.exports.Utility = {};

  Utility.sendMarketingEmail = Thrift.Method.define({
    alias: 'sendMarketingEmail',
    args: Thrift.Struct.define('sendMarketingEmailArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'parameters', type: Thrift.Type.STRUCT, def: module.exports.MarketingEmailParameters, index: 1 }
    }),
    result: Thrift.Struct.define('sendMarketingEmailResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.fileSupportTicket = Thrift.Method.define({
    alias: 'fileSupportTicket',
    args: Thrift.Struct.define('fileSupportTicketArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'ticket', type: Thrift.Type.STRUCT, def: module.exports.SupportTicket, index: 1 }
    }),
    result: Thrift.Struct.define('fileSupportTicketResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.fileSupportTicketReturnId = Thrift.Method.define({
    alias: 'fileSupportTicketReturnId',
    args: Thrift.Struct.define('fileSupportTicketReturnIdArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'ticket', type: Thrift.Type.STRUCT, def: module.exports.SupportTicket, index: 1 }
    }),
    result: Thrift.Struct.define('fileSupportTicketReturnIdResult', {
      0: { alias: 'returnValue',type: Thrift.Type.I32 },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.sendAppFeedback = Thrift.Method.define({
    alias: 'sendAppFeedback',
    args: Thrift.Struct.define('sendAppFeedbackArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'appFeedback', type: Thrift.Type.STRUCT, def: module.exports.AppFeedback, index: 1 }
    }),
    result: Thrift.Struct.define('sendAppFeedbackResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.sendAppFeedbackForDevice = Thrift.Method.define({
    alias: 'sendAppFeedbackForDevice',
    args: Thrift.Struct.define('sendAppFeedbackForDeviceArgs', {
      1: { alias: 'deviceIdentifier', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'apiConsumerKey', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'apiConsumerSecret', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'appFeedback', type: Thrift.Type.STRUCT, def: module.exports.AppFeedback, index: 3 }
    }),
    result: Thrift.Struct.define('sendAppFeedbackForDeviceResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getCrossPromotionInfo = Thrift.Method.define({
    alias: 'getCrossPromotionInfo',
    args: Thrift.Struct.define('getCrossPromotionInfoArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getCrossPromotionInfoResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CrossPromotionInfo },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.referFriends = Thrift.Method.define({
    alias: 'referFriends',
    args: Thrift.Struct.define('referFriendsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'referredEmails', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING) , index: 1 }
    }),
    result: Thrift.Struct.define('referFriendsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.listFriendReferrals = Thrift.Method.define({
    alias: 'listFriendReferrals',
    args: Thrift.Struct.define('listFriendReferralsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listFriendReferralsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.FriendReferral)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.sendVerificationEmail = Thrift.Method.define({
    alias: 'sendVerificationEmail',
    args: Thrift.Struct.define('sendVerificationEmailArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('sendVerificationEmailResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.confirmEmailAddress = Thrift.Method.define({
    alias: 'confirmEmailAddress',
    args: Thrift.Struct.define('confirmEmailAddressArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('confirmEmailAddressResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.getOAuthCredential = Thrift.Method.define({
    alias: 'getOAuthCredential',
    args: Thrift.Struct.define('getOAuthCredentialArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'serviceId', type: Thrift.Type.I16, index: 1 }
    }),
    result: Thrift.Struct.define('getOAuthCredentialResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.OAuthCredential },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getOAuthCredentialByEmailAndScope = Thrift.Method.define({
    alias: 'getOAuthCredentialByEmailAndScope',
    args: Thrift.Struct.define('getOAuthCredentialByEmailAndScopeArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'serviceId', type: Thrift.Type.I16, index: 1 },
      3: { alias: 'email', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'scope', type: Thrift.Type.STRING, index: 3 }
    }),
    result: Thrift.Struct.define('getOAuthCredentialByEmailAndScopeResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.OAuthCredential },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.hasOAuthCredential = Thrift.Method.define({
    alias: 'hasOAuthCredential',
    args: Thrift.Struct.define('hasOAuthCredentialArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'serviceId', type: Thrift.Type.I16, index: 1 }
    }),
    result: Thrift.Struct.define('hasOAuthCredentialResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getScopedGoogleOAuthCredential = Thrift.Method.define({
    alias: 'getScopedGoogleOAuthCredential',
    args: Thrift.Struct.define('getScopedGoogleOAuthCredentialArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'googleOAuthScope', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('getScopedGoogleOAuthCredentialResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.OAuthCredential },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getAllScopedGoogleOAuthCredential = Thrift.Method.define({
    alias: 'getAllScopedGoogleOAuthCredential',
    args: Thrift.Struct.define('getAllScopedGoogleOAuthCredentialArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'googleOAuthScope', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('getAllScopedGoogleOAuthCredentialResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.OAuthCredential)  },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.hasGoogleOAuthCredential = Thrift.Method.define({
    alias: 'hasGoogleOAuthCredential',
    args: Thrift.Struct.define('hasGoogleOAuthCredentialArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'googleOAuthScope', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('hasGoogleOAuthCredentialResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.setOAuthCredential = Thrift.Method.define({
    alias: 'setOAuthCredential',
    args: Thrift.Struct.define('setOAuthCredentialArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'oAuthCredential', type: Thrift.Type.STRUCT, def: module.exports.OAuthCredential, index: 1 }
    }),
    result: Thrift.Struct.define('setOAuthCredentialResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.OAuthCredential },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.deleteOAuthCredential = Thrift.Method.define({
    alias: 'deleteOAuthCredential',
    args: Thrift.Struct.define('deleteOAuthCredentialArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'serviceId', type: Thrift.Type.I16, index: 1 }
    }),
    result: Thrift.Struct.define('deleteOAuthCredentialResult', {
      1: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.deleteOAuthCredentialByEmailAndScope = Thrift.Method.define({
    alias: 'deleteOAuthCredentialByEmailAndScope',
    args: Thrift.Struct.define('deleteOAuthCredentialByEmailAndScopeArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'serviceId', type: Thrift.Type.I16, index: 1 },
      3: { alias: 'email', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'scope', type: Thrift.Type.STRING, index: 3 }
    }),
    result: Thrift.Struct.define('deleteOAuthCredentialByEmailAndScopeResult', {
      1: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getUserCardScanningEndDate = Thrift.Method.define({
    alias: 'getUserCardScanningEndDate',
    args: Thrift.Struct.define('getUserCardScanningEndDateArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getUserCardScanningEndDateResult', {
      0: { alias: 'returnValue',type: Thrift.Type.I64 },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getPromotionStatus = Thrift.Method.define({
    alias: 'getPromotionStatus',
    args: Thrift.Struct.define('getPromotionStatusArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'promotionIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING) , index: 1 }
    }),
    result: Thrift.Struct.define('getPromotionStatusResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.PromotionStatus)  },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.promotionsShown = Thrift.Method.define({
    alias: 'promotionsShown',
    args: Thrift.Struct.define('promotionsShownArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'promotionIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING) , index: 1 }
    }),
    result: Thrift.Struct.define('promotionsShownResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.PromotionStatus)  },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.promotionOptedOut = Thrift.Method.define({
    alias: 'promotionOptedOut',
    args: Thrift.Struct.define('promotionOptedOutArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'promotionId', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('promotionOptedOutResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getRelatedContentSourcePreferences = Thrift.Method.define({
    alias: 'getRelatedContentSourcePreferences',
    args: Thrift.Struct.define('getRelatedContentSourcePreferencesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getRelatedContentSourcePreferencesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.RelatedContentSourcePreference)  },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.setRelatedContentSourceActivated = Thrift.Method.define({
    alias: 'setRelatedContentSourceActivated',
    args: Thrift.Struct.define('setRelatedContentSourceActivatedArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'sourceId', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'activated', type: Thrift.Type.BOOL, index: 2 }
    }),
    result: Thrift.Struct.define('setRelatedContentSourceActivatedResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.clearRelatedContentProfiles = Thrift.Method.define({
    alias: 'clearRelatedContentProfiles',
    args: Thrift.Struct.define('clearRelatedContentProfilesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'sourceId', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('clearRelatedContentProfilesResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.addRelatedContentProfiles = Thrift.Method.define({
    alias: 'addRelatedContentProfiles',
    args: Thrift.Struct.define('addRelatedContentProfilesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'profiles', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.RelatedContentProfile) , index: 1 }
    }),
    result: Thrift.Struct.define('addRelatedContentProfilesResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.updateRelatedContentProfiles = Thrift.Method.define({
    alias: 'updateRelatedContentProfiles',
    args: Thrift.Struct.define('updateRelatedContentProfilesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'sourceId', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('updateRelatedContentProfilesResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getRelatedContentProfilePage = Thrift.Method.define({
    alias: 'getRelatedContentProfilePage',
    args: Thrift.Struct.define('getRelatedContentProfilePageArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'profileId', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('getRelatedContentProfilePageResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.RelatedContentProfilePage },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.importNotesFromEnex = Thrift.Method.define({
    alias: 'importNotesFromEnex',
    args: Thrift.Struct.define('importNotesFromEnexArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'enexUrl', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'notebookGuid', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'importNoteTags', type: Thrift.Type.BOOL, index: 3 },
      5: { alias: 'importNoteCreated', type: Thrift.Type.BOOL, index: 4 },
      6: { alias: 'importNoteUpdated', type: Thrift.Type.BOOL, index: 5 }
    }),
    result: Thrift.Struct.define('importNotesFromEnexResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.setUserProfilePhoto = Thrift.Method.define({
    alias: 'setUserProfilePhoto',
    args: Thrift.Struct.define('setUserProfilePhotoArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'photo', type: Thrift.Type.BINARY, index: 1 }
    }),
    result: Thrift.Struct.define('setUserProfilePhotoResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.removeUserProfilePhoto = Thrift.Method.define({
    alias: 'removeUserProfilePhoto',
    args: Thrift.Struct.define('removeUserProfilePhotoArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('removeUserProfilePhotoResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.setUserFullName = Thrift.Method.define({
    alias: 'setUserFullName',
    args: Thrift.Struct.define('setUserFullNameArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'name', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('setUserFullNameResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.getMessageInvitation = Thrift.Method.define({
    alias: 'getMessageInvitation',
    args: Thrift.Struct.define('getMessageInvitationArgs', {
      1: { alias: 'messageInvitationId', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getMessageInvitationResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.MessagingInvitation },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.claimMessageInvitation = Thrift.Method.define({
    alias: 'claimMessageInvitation',
    args: Thrift.Struct.define('claimMessageInvitationArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'messageInvitationId', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('claimMessageInvitationResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.canPurchaseTeamStarterPack = Thrift.Method.define({
    alias: 'canPurchaseTeamStarterPack',
    args: Thrift.Struct.define('canPurchaseTeamStarterPackArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.TeamStarterPackRequest, index: 1 }
    }),
    result: Thrift.Struct.define('canPurchaseTeamStarterPackResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.TeamStarterPackResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getTsdEligibility = Thrift.Method.define({
    alias: 'getTsdEligibility',
    args: Thrift.Struct.define('getTsdEligibilityArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.TierSelectionDisplayEligibilityRequest, index: 1 }
    }),
    result: Thrift.Struct.define('getTsdEligibilityResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.TierSelectionDisplayEligibilityResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.updatePassword = Thrift.Method.define({
    alias: 'updatePassword',
    args: Thrift.Struct.define('updatePasswordArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'oldPassword', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'newPassword', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('updatePasswordResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.getIncentiveEligibility = Thrift.Method.define({
    alias: 'getIncentiveEligibility',
    args: Thrift.Struct.define('getIncentiveEligibilityArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getIncentiveEligibilityResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.IncentiveEligibilityResult },
      1: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.invalidateGoogleOauthCredential = Thrift.Method.define({
    alias: 'invalidateGoogleOauthCredential',
    args: Thrift.Struct.define('invalidateGoogleOauthCredentialArgs', {
      1: { alias: 'authToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('invalidateGoogleOauthCredentialResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.invalidateGoogleOauthCredentialByEmailAndScope = Thrift.Method.define({
    alias: 'invalidateGoogleOauthCredentialByEmailAndScope',
    args: Thrift.Struct.define('invalidateGoogleOauthCredentialByEmailAndScopeArgs', {
      1: { alias: 'authToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'email', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'scope', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('invalidateGoogleOauthCredentialByEmailAndScopeResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.associateOpenIDWithUser = Thrift.Method.define({
    alias: 'associateOpenIDWithUser',
    args: Thrift.Struct.define('associateOpenIDWithUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'credential', type: Thrift.Type.STRUCT, def: AuthenticationTypes.OpenIdCredential, index: 1 }
    }),
    result: Thrift.Struct.define('associateOpenIDWithUserResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.dissociateOpenIDFromUser = Thrift.Method.define({
    alias: 'dissociateOpenIDFromUser',
    args: Thrift.Struct.define('dissociateOpenIDFromUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'credential', type: Thrift.Type.STRUCT, def: AuthenticationTypes.OpenIdCredential, index: 1 }
    }),
    result: Thrift.Struct.define('dissociateOpenIDFromUserResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.dissociateAllOpenIDsFromUser = Thrift.Method.define({
    alias: 'dissociateAllOpenIDsFromUser',
    args: Thrift.Struct.define('dissociateAllOpenIDsFromUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('dissociateAllOpenIDsFromUserResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.moveNotebookBetweenAccounts = Thrift.Method.define({
    alias: 'moveNotebookBetweenAccounts',
    args: Thrift.Struct.define('moveNotebookBetweenAccountsArgs', {
      1: { alias: 'sourceAuthenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'targetAuthenticationToken', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'parameters', type: Thrift.Type.STRUCT, def: module.exports.MoveNotebookBetweenAccountsParams, index: 2 }
    }),
    result: Thrift.Struct.define('moveNotebookBetweenAccountsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: Types.Notebook },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.moveNotebooksBetweenAccounts = Thrift.Method.define({
    alias: 'moveNotebooksBetweenAccounts',
    args: Thrift.Struct.define('moveNotebooksBetweenAccountsArgs', {
      1: { alias: 'sourceAuthenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'targetAuthenticationToken', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'parameters', type: Thrift.Type.STRUCT, def: module.exports.MoveNotebooksBetweenAccountsParams, index: 2 }
    }),
    result: Thrift.Struct.define('moveNotebooksBetweenAccountsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.MoveNotebooksBetweenAccountsResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.moveNoteBetweenAccounts = Thrift.Method.define({
    alias: 'moveNoteBetweenAccounts',
    args: Thrift.Struct.define('moveNoteBetweenAccountsArgs', {
      1: { alias: 'sourceAuthenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'targetAuthenticationToken', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'parameters', type: Thrift.Type.STRUCT, def: module.exports.MoveNoteBetweenAccountsParams, index: 2 }
    }),
    result: Thrift.Struct.define('moveNoteBetweenAccountsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.MoveNoteBetweenAccountsResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.findNotesMetadataForIon = Thrift.Method.define({
    alias: 'findNotesMetadataForIon',
    args: Thrift.Struct.define('findNotesMetadataForIonArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'filter', type: Thrift.Type.STRUCT, def: NoteStore.NoteFilter, index: 1 },
      3: { alias: 'offset', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'maxNotes', type: Thrift.Type.I32, index: 3 },
      5: { alias: 'resultSpec', type: Thrift.Type.STRUCT, def: NoteStore.NotesMetadataResultSpec, index: 4 }
    }),
    result: Thrift.Struct.define('findNotesMetadataForIonResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: NoteStore.NotesMetadataList },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.findNotesCardMetadata = Thrift.Method.define({
    alias: 'findNotesCardMetadata',
    args: Thrift.Struct.define('findNotesCardMetadataArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'filter', type: Thrift.Type.STRUCT, def: NoteStore.NoteFilter, index: 1 },
      3: { alias: 'offset', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'maxNotes', type: Thrift.Type.I32, index: 3 },
      5: { alias: 'resultSpec', type: Thrift.Type.STRUCT, def: NoteStore.NotesMetadataResultSpec, index: 4 }
    }),
    result: Thrift.Struct.define('findNotesCardMetadataResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.NoteCardMetadata)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.getNotesCardMetadata = Thrift.Method.define({
    alias: 'getNotesCardMetadata',
    args: Thrift.Struct.define('getNotesCardMetadataArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'noteGuids', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING) , index: 1 },
      3: { alias: 'resultSpec', type: Thrift.Type.STRUCT, def: NoteStore.NoteResultSpec, index: 2 }
    }),
    result: Thrift.Struct.define('getNotesCardMetadataResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.NoteCardMetadata)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.createWorkspaceWithResultSpec = Thrift.Method.define({
    alias: 'createWorkspaceWithResultSpec',
    args: Thrift.Struct.define('createWorkspaceWithResultSpecArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspace', type: Thrift.Type.STRUCT, def: SpaceService.Workspace, index: 1 },
      3: { alias: 'spec', type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceResponseSpec, index: 2 }
    }),
    result: Thrift.Struct.define('createWorkspaceWithResultSpecResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceResponse },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.createWorkspace = Thrift.Method.define({
    alias: 'createWorkspace',
    args: Thrift.Struct.define('createWorkspaceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspace', type: Thrift.Type.STRUCT, def: SpaceService.Workspace, index: 1 }
    }),
    result: Thrift.Struct.define('createWorkspaceResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: SpaceService.Workspace },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.copyWorkspace = Thrift.Method.define({
    alias: 'copyWorkspace',
    args: Thrift.Struct.define('copyWorkspaceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'spec', type: Thrift.Type.STRUCT, def: SpaceService.CopyWorkspaceSpec, index: 1 }
    }),
    result: Thrift.Struct.define('copyWorkspaceResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceResponse },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.listSyncingNotebookGuidsInBusinessAccount = Thrift.Method.define({
    alias: 'listSyncingNotebookGuidsInBusinessAccount',
    args: Thrift.Struct.define('listSyncingNotebookGuidsInBusinessAccountArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listSyncingNotebookGuidsInBusinessAccountResult', {
      0: { alias: 'returnValue',type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING) },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.getWorkspace = Thrift.Method.define({
    alias: 'getWorkspace',
    args: Thrift.Struct.define('getWorkspaceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'responseSpec', type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceResponseSpec, index: 2 }
    }),
    result: Thrift.Struct.define('getWorkspaceResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceResponse },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.getWorkspaceIfUserHasPrivilege = Thrift.Method.define({
    alias: 'getWorkspaceIfUserHasPrivilege',
    args: Thrift.Struct.define('getWorkspaceIfUserHasPrivilegeArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'responseSpec', type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceResponseSpec, index: 2 },
      4: { alias: 'privilegeLevel', type: Thrift.Type.I32, index: 3 }
    }),
    result: Thrift.Struct.define('getWorkspaceIfUserHasPrivilegeResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceResponse },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.listWorkspaces = Thrift.Method.define({
    alias: 'listWorkspaces',
    args: Thrift.Struct.define('listWorkspacesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listWorkspacesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, SpaceService.Workspace)  },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.listWorkspacesWithResultSpec = Thrift.Method.define({
    alias: 'listWorkspacesWithResultSpec',
    args: Thrift.Struct.define('listWorkspacesWithResultSpecArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceResponseSpec', type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceResponseSpec, index: 1 },
      3: { alias: 'filter', type: Thrift.Type.STRUCT, def: SpaceService.WorkspaceFilter, index: 2 }
    }),
    result: Thrift.Struct.define('listWorkspacesWithResultSpecResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, SpaceService.WorkspaceResponse)  },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  Utility.updateWorkspace = Thrift.Method.define({
    alias: 'updateWorkspace',
    args: Thrift.Struct.define('updateWorkspaceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspace', type: Thrift.Type.STRUCT, def: SpaceService.Workspace, index: 1 }
    }),
    result: Thrift.Struct.define('updateWorkspaceResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: SpaceService.Workspace },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.moveNotebookToAccount = Thrift.Method.define({
    alias: 'moveNotebookToAccount',
    args: Thrift.Struct.define('moveNotebookToAccountArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'notebookGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('moveNotebookToAccountResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.manageWorkspaceSharing = Thrift.Method.define({
    alias: 'manageWorkspaceSharing',
    args: Thrift.Struct.define('manageWorkspaceSharingArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: SpaceService.ManageWorkspaceSharingRequest, index: 1 }
    }),
    result: Thrift.Struct.define('manageWorkspaceSharingResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: SpaceService.ManageWorkspaceSharingResponse },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.joinWorkspace = Thrift.Method.define({
    alias: 'joinWorkspace',
    args: Thrift.Struct.define('joinWorkspaceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('joinWorkspaceResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.leaveWorkspace = Thrift.Method.define({
    alias: 'leaveWorkspace',
    args: Thrift.Struct.define('leaveWorkspaceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('leaveWorkspaceResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.sendSharedNotebookViewedEvent = Thrift.Method.define({
    alias: 'sendSharedNotebookViewedEvent',
    args: Thrift.Struct.define('sendSharedNotebookViewedEventArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'notebookGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('sendSharedNotebookViewedEventResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.sendSharedNoteViewedEvent = Thrift.Method.define({
    alias: 'sendSharedNoteViewedEvent',
    args: Thrift.Struct.define('sendSharedNoteViewedEventArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'noteGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('sendSharedNoteViewedEventResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.sendWorkspaceViewedEvent = Thrift.Method.define({
    alias: 'sendWorkspaceViewedEvent',
    args: Thrift.Struct.define('sendWorkspaceViewedEventArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('sendWorkspaceViewedEventResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.expungeWorkspace = Thrift.Method.define({
    alias: 'expungeWorkspace',
    args: Thrift.Struct.define('expungeWorkspaceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('expungeWorkspaceResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.createSurveyNote = Thrift.Method.define({
    alias: 'createSurveyNote',
    args: Thrift.Struct.define('createSurveyNoteArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'note', type: Thrift.Type.STRUCT, def: Types.Note, index: 1 },
      3: { alias: 'surveyId', type: Thrift.Type.I32, index: 2 }
    }),
    result: Thrift.Struct.define('createSurveyNoteResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: Types.Note },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.createSurvey = Thrift.Method.define({
    alias: 'createSurvey',
    args: Thrift.Struct.define('createSurveyArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'survey', type: Thrift.Type.STRUCT, def: module.exports.Survey, index: 1 }
    }),
    result: Thrift.Struct.define('createSurveyResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Survey },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.finalizeSurvey = Thrift.Method.define({
    alias: 'finalizeSurvey',
    args: Thrift.Struct.define('finalizeSurveyArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'surveyId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('finalizeSurveyResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Survey },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.cloneSurvey = Thrift.Method.define({
    alias: 'cloneSurvey',
    args: Thrift.Struct.define('cloneSurveyArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'surveyId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'surveyName', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'copyRatings', type: Thrift.Type.BOOL, index: 3 },
      5: { alias: 'copyComments', type: Thrift.Type.BOOL, index: 4 }
    }),
    result: Thrift.Struct.define('cloneSurveyResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Survey },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.getLastOpenSurveyForEntity = Thrift.Method.define({
    alias: 'getLastOpenSurveyForEntity',
    args: Thrift.Struct.define('getLastOpenSurveyForEntityArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'entityType', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'entityGuid', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('getLastOpenSurveyForEntityResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.Survey },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.listSurveysForEntity = Thrift.Method.define({
    alias: 'listSurveysForEntity',
    args: Thrift.Struct.define('listSurveysForEntityArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'entityType', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'entityGuid', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('listSurveysForEntityResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.Survey)  },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.getSurveyItemForEntity = Thrift.Method.define({
    alias: 'getSurveyItemForEntity',
    args: Thrift.Struct.define('getSurveyItemForEntityArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'entityType', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'entityGuid', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'surveyId', type: Thrift.Type.I32, index: 3 }
    }),
    result: Thrift.Struct.define('getSurveyItemForEntityResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.SurveyItem },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.finalizeEntityForRating = Thrift.Method.define({
    alias: 'finalizeEntityForRating',
    args: Thrift.Struct.define('finalizeEntityForRatingArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'surveyId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'entityType', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'entityGuid', type: Thrift.Type.STRING, index: 3 },
      5: { alias: 'category', type: Thrift.Type.STRING, index: 4 }
    }),
    result: Thrift.Struct.define('finalizeEntityForRatingResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.SurveyItem },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.updateAndFinalizeSurveyNote = Thrift.Method.define({
    alias: 'updateAndFinalizeSurveyNote',
    args: Thrift.Struct.define('updateAndFinalizeSurveyNoteArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'note', type: Thrift.Type.STRUCT, def: Types.Note, index: 1 },
      3: { alias: 'surveyId', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'category', type: Thrift.Type.STRING, index: 3 }
    }),
    result: Thrift.Struct.define('updateAndFinalizeSurveyNoteResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.SurveyItem },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.removeSurveyItem = Thrift.Method.define({
    alias: 'removeSurveyItem',
    args: Thrift.Struct.define('removeSurveyItemArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'surveyId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'surveyItemId', type: Thrift.Type.I32, index: 2 }
    }),
    result: Thrift.Struct.define('removeSurveyItemResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.saveSurveyItemRating = Thrift.Method.define({
    alias: 'saveSurveyItemRating',
    args: Thrift.Struct.define('saveSurveyItemRatingArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'surveyItemId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'rating', type: Thrift.Type.I32, index: 2 }
    }),
    result: Thrift.Struct.define('saveSurveyItemRatingResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.SurveyItemRating },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.saveSurveyItemComment = Thrift.Method.define({
    alias: 'saveSurveyItemComment',
    args: Thrift.Struct.define('saveSurveyItemCommentArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'surveyItemId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'comment', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('saveSurveyItemCommentResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.SurveyItemRating },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.addSurveyItemComment = Thrift.Method.define({
    alias: 'addSurveyItemComment',
    args: Thrift.Struct.define('addSurveyItemCommentArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'surveyItemId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'comment', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('addSurveyItemCommentResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.SurveyItemComment },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.getConfigValuesAsJSON = Thrift.Method.define({
    alias: 'getConfigValuesAsJSON',
    args: Thrift.Struct.define('getConfigValuesAsJSONArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.ConfigValuesRequest, index: 1 }
    }),
    result: Thrift.Struct.define('getConfigValuesAsJSONResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRING },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.addAllUsersFromBusinessToSpace = Thrift.Method.define({
    alias: 'addAllUsersFromBusinessToSpace',
    args: Thrift.Struct.define('addAllUsersFromBusinessToSpaceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'spaceGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('addAllUsersFromBusinessToSpaceResult', {
      0: { alias: 'returnValue',type: Thrift.Type.I32 },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.listNotebooksForIonOnly = Thrift.Method.define({
    alias: 'listNotebooksForIonOnly',
    args: Thrift.Struct.define('listNotebooksForIonOnlyArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listNotebooksForIonOnlyResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, Types.Notebook)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getMaxServiceUpdatedFromNotes = Thrift.Method.define({
    alias: 'getMaxServiceUpdatedFromNotes',
    args: Thrift.Struct.define('getMaxServiceUpdatedFromNotesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'notebookGuids', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING), index: 1 }
    }),
    result: Thrift.Struct.define('getMaxServiceUpdatedFromNotesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.I64 )  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.addResource = Thrift.Method.define({
    alias: 'addResource',
    args: Thrift.Struct.define('addResourceArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'resource', type: Thrift.Type.STRUCT, def: Types.Resource, index: 1 }
    }),
    result: Thrift.Struct.define('addResourceResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: Types.Resource },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.addResourceToNote = Thrift.Method.define({
    alias: 'addResourceToNote',
    args: Thrift.Struct.define('addResourceToNoteArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'resource', type: Thrift.Type.STRUCT, def: Types.Resource, index: 1 }
    }),
    result: Thrift.Struct.define('addResourceToNoteResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: Types.Note },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.updateNoteIfUsnMatches = Thrift.Method.define({
    alias: 'updateNoteIfUsnMatches',
    args: Thrift.Struct.define('updateNoteIfUsnMatchesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'note', type: Thrift.Type.STRUCT, def: Types.Note, index: 1 },
      3: { alias: 'resourcesUpdateRequest', type: Thrift.Type.STRUCT, def: module.exports.ResourcesUpdateRequest, index: 2 }
    }),
    result: Thrift.Struct.define('updateNoteIfUsnMatchesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: NoteStore.UpdateNoteIfUsnMatchesResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.createNote = Thrift.Method.define({
    alias: 'createNote',
    args: Thrift.Struct.define('createNoteArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'note', type: Thrift.Type.STRUCT, def: Types.Note, index: 1 },
      3: { alias: 'resourcesCreateRequest', type: Thrift.Type.STRUCT, def: module.exports.ResourcesCreateRequest, index: 2 }
    }),
    result: Thrift.Struct.define('createNoteResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: Types.Note },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.listBetaFeatures = Thrift.Method.define({
    alias: 'listBetaFeatures',
    args: Thrift.Struct.define('listBetaFeaturesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listBetaFeaturesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.BetaFeature)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.listBetaFeatureEnrollments = Thrift.Method.define({
    alias: 'listBetaFeatureEnrollments',
    args: Thrift.Struct.define('listBetaFeatureEnrollmentsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listBetaFeatureEnrollmentsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.BetaFeatureEnrollment)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.enrollInBetaFeature = Thrift.Method.define({
    alias: 'enrollInBetaFeature',
    args: Thrift.Struct.define('enrollInBetaFeatureArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'featureKey', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('enrollInBetaFeatureResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.enableBetaFeature = Thrift.Method.define({
    alias: 'enableBetaFeature',
    args: Thrift.Struct.define('enableBetaFeatureArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'featureKey', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'enrollmentGuid', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'enabled', type: Thrift.Type.BOOL, index: 3 }
    }),
    result: Thrift.Struct.define('enableBetaFeatureResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.listEnabledFeatures = Thrift.Method.define({
    alias: 'listEnabledFeatures',
    args: Thrift.Struct.define('listEnabledFeaturesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listEnabledFeaturesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.checkEnabledFeatures = Thrift.Method.define({
    alias: 'checkEnabledFeatures',
    args: Thrift.Struct.define('checkEnabledFeaturesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'featureKeysToCheck', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32) , index: 1 }
    }),
    result: Thrift.Struct.define('checkEnabledFeaturesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.FeatureAvailability)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.checkUserFeatures = Thrift.Method.define({
    alias: 'checkUserFeatures',
    args: Thrift.Struct.define('checkUserFeaturesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'featureKeysToCheck', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32) , index: 1 }
    }),
    result: Thrift.Struct.define('checkUserFeaturesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.FeatureAvailability)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getNotePermissionsForRTE = Thrift.Method.define({
    alias: 'getNotePermissionsForRTE',
    args: Thrift.Struct.define('getNotePermissionsForRTEArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'noteGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('getNotePermissionsForRTEResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.RealTimeNotePermissionsResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.pinContentToWidget = Thrift.Method.define({
    alias: 'pinContentToWidget',
    args: Thrift.Struct.define('pinContentToWidgetArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'entityType', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'entityGuidOrUri', type: Thrift.Type.STRING, index: 3 }
    }),
    result: Thrift.Struct.define('pinContentToWidgetResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.PinnedContent },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.unpinContentFromWidget = Thrift.Method.define({
    alias: 'unpinContentFromWidget',
    args: Thrift.Struct.define('unpinContentFromWidgetArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'entityType', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'entityGuidOrUri', type: Thrift.Type.STRING, index: 3 }
    }),
    result: Thrift.Struct.define('unpinContentFromWidgetResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.listPinnedContent = Thrift.Method.define({
    alias: 'listPinnedContent',
    args: Thrift.Struct.define('listPinnedContentArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('listPinnedContentResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.PinnedContent)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getWorkspaceNotebookSummary = Thrift.Method.define({
    alias: 'getWorkspaceNotebookSummary',
    args: Thrift.Struct.define('getWorkspaceNotebookSummaryArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('getWorkspaceNotebookSummaryResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.NotebookSummary)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.updateContentOfPinnedWidget = Thrift.Method.define({
    alias: 'updateContentOfPinnedWidget',
    args: Thrift.Struct.define('updateContentOfPinnedWidgetArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'toBePinnedContentList', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.PinnedContent) , index: 2 },
      4: { alias: 'toBeUnpinnedContentList', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.PinnedContent) , index: 3 }
    }),
    result: Thrift.Struct.define('updateContentOfPinnedWidgetResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.PinnedContent)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.changePinnedContentPosition = Thrift.Method.define({
    alias: 'changePinnedContentPosition',
    args: Thrift.Struct.define('changePinnedContentPositionArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.ChangePositionRequest, index: 2 }
    }),
    result: Thrift.Struct.define('changePinnedContentPositionResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.PinnedContent)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.requestAccessToWorkspace = Thrift.Method.define({
    alias: 'requestAccessToWorkspace',
    args: Thrift.Struct.define('requestAccessToWorkspaceArgs', {
      1: { alias: 'authToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'workspaceGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('requestAccessToWorkspaceResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.listRecommendedNotes = Thrift.Method.define({
    alias: 'listRecommendedNotes',
    args: Thrift.Struct.define('listRecommendedNotesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.RecommendationRequest, index: 1 },
      3: { alias: 'offset', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'maxNotes', type: Thrift.Type.I32, index: 3 }
    }),
    result: Thrift.Struct.define('listRecommendedNotesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.RecommendedNoteCardMetadata)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getRecommendedNoteCardMetadata = Thrift.Method.define({
    alias: 'getRecommendedNoteCardMetadata',
    args: Thrift.Struct.define('getRecommendedNoteCardMetadataArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.RecommendedNoteCardMetadataRequest, index: 1 }
    }),
    result: Thrift.Struct.define('getRecommendedNoteCardMetadataResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.RecommendedNoteCardMetadata)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.submitRatingForRecommendedNote = Thrift.Method.define({
    alias: 'submitRatingForRecommendedNote',
    args: Thrift.Struct.define('submitRatingForRecommendedNoteArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'noteGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'rating', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'engine', type: Thrift.Type.STRING, index: 3 }
    }),
    result: Thrift.Struct.define('submitRatingForRecommendedNoteResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getFirebaseAuthCredential = Thrift.Method.define({
    alias: 'getFirebaseAuthCredential',
    args: Thrift.Struct.define('getFirebaseAuthCredentialArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getFirebaseAuthCredentialResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRING },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getUserRestrictions = Thrift.Method.define({
    alias: 'getUserRestrictions',
    args: Thrift.Struct.define('getUserRestrictionsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getUserRestrictionsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: Types.UserRestrictions },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getNsvcThirdPartyAuthorizationToken = Thrift.Method.define({
    alias: 'getNsvcThirdPartyAuthorizationToken',
    args: Thrift.Struct.define('getNsvcThirdPartyAuthorizationTokenArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getNsvcThirdPartyAuthorizationTokenResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.NsvcThirdPartyAuthorizationTokenResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getNsvcThirdPartyAuthorizationTokenByType = Thrift.Method.define({
    alias: 'getNsvcThirdPartyAuthorizationTokenByType',
    args: Thrift.Struct.define('getNsvcThirdPartyAuthorizationTokenByTypeArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'tokenType', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('getNsvcThirdPartyAuthorizationTokenByTypeResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.NsvcThirdPartyAuthorizationTokenResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.registerSession = Thrift.Method.define({
    alias: 'registerSession',
    args: Thrift.Struct.define('registerSessionArgs', {
      1: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.RegisterDeviceSessionRequest, index: 0 }
    }),
    result: Thrift.Struct.define('registerSessionResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.hasActiveSessions = Thrift.Method.define({
    alias: 'hasActiveSessions',
    args: Thrift.Struct.define('hasActiveSessionsArgs', {
      1: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.HasActiveSessionRequest, index: 0 }
    }),
    result: Thrift.Struct.define('hasActiveSessionsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.sendOneTimeCode = Thrift.Method.define({
    alias: 'sendOneTimeCode',
    args: Thrift.Struct.define('sendOneTimeCodeArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'sendToBackupPhone', type: Thrift.Type.BOOL, index: 1 },
      3: { alias: 'messageTemplate', type: Thrift.Type.STRING, index: 2 },
      4: { alias: 'useVoice', type: Thrift.Type.BOOL, index: 3 }
    }),
    result: Thrift.Struct.define('sendOneTimeCodeResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRING },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.getMasked2FAMobileNumbers = Thrift.Method.define({
    alias: 'getMasked2FAMobileNumbers',
    args: Thrift.Struct.define('getMasked2FAMobileNumbersArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getMasked2FAMobileNumbersResult', {
      0: { alias: 'returnValue',type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.STRING )  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  Utility.mmsvcGetPaywallState = Thrift.Method.define({
    alias: 'mmsvcGetPaywallState',
    args: Thrift.Struct.define('mmsvcGetPaywallStateArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.MmsvcRequest, index: 1 }
    }),
    result: Thrift.Struct.define('mmsvcGetPaywallStateResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.MmsvcResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.mmsvcCreateDeviceSync = Thrift.Method.define({
    alias: 'mmsvcCreateDeviceSync',
    args: Thrift.Struct.define('mmsvcCreateDeviceSyncArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('mmsvcCreateDeviceSyncResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.MmsvcResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  Utility.revokeSession = Thrift.Method.define({
    alias: 'revokeSession',
    args: Thrift.Struct.define('revokeSessionArgs', {
      1: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.RevokeSessionRequest, index: 0 }
    }),
    result: Thrift.Struct.define('revokeSessionResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  // Define Utility Client

  function UtilityClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  UtilityClient.prototype.sendMarketingEmail = function(authenticationToken, parameters, callback) {
    var mdef = Utility.sendMarketingEmail;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.parameters = parameters;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.fileSupportTicket = function(authenticationToken, ticket, callback) {
    var mdef = Utility.fileSupportTicket;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.ticket = ticket;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.fileSupportTicketReturnId = function(authenticationToken, ticket, callback) {
    var mdef = Utility.fileSupportTicketReturnId;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.ticket = ticket;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.sendAppFeedback = function(authenticationToken, appFeedback, callback) {
    var mdef = Utility.sendAppFeedback;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.appFeedback = appFeedback;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.sendAppFeedbackForDevice = function(deviceIdentifier, apiConsumerKey, apiConsumerSecret, appFeedback, callback) {
    var mdef = Utility.sendAppFeedbackForDevice;
    var args = new mdef.args();
    args.deviceIdentifier = deviceIdentifier;
    args.apiConsumerKey = apiConsumerKey;
    args.apiConsumerSecret = apiConsumerSecret;
    args.appFeedback = appFeedback;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getCrossPromotionInfo = function(authenticationToken, callback) {
    var mdef = Utility.getCrossPromotionInfo;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.referFriends = function(authenticationToken, referredEmails, callback) {
    var mdef = Utility.referFriends;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.referredEmails = referredEmails;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listFriendReferrals = function(authenticationToken, callback) {
    var mdef = Utility.listFriendReferrals;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.sendVerificationEmail = function(authenticationToken, callback) {
    var mdef = Utility.sendVerificationEmail;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.confirmEmailAddress = function(authenticationToken, callback) {
    var mdef = Utility.confirmEmailAddress;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getOAuthCredential = function(authenticationToken, serviceId, callback) {
    var mdef = Utility.getOAuthCredential;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.serviceId = serviceId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getOAuthCredentialByEmailAndScope = function(authenticationToken, serviceId, email, scope, callback) {
    var mdef = Utility.getOAuthCredentialByEmailAndScope;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.serviceId = serviceId;
    args.email = email;
    args.scope = scope;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.hasOAuthCredential = function(authenticationToken, serviceId, callback) {
    var mdef = Utility.hasOAuthCredential;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.serviceId = serviceId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getScopedGoogleOAuthCredential = function(authenticationToken, googleOAuthScope, callback) {
    var mdef = Utility.getScopedGoogleOAuthCredential;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.googleOAuthScope = googleOAuthScope;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getAllScopedGoogleOAuthCredential = function(authenticationToken, googleOAuthScope, callback) {
    var mdef = Utility.getAllScopedGoogleOAuthCredential;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.googleOAuthScope = googleOAuthScope;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.hasGoogleOAuthCredential = function(authenticationToken, googleOAuthScope, callback) {
    var mdef = Utility.hasGoogleOAuthCredential;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.googleOAuthScope = googleOAuthScope;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.setOAuthCredential = function(authenticationToken, oAuthCredential, callback) {
    var mdef = Utility.setOAuthCredential;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.oAuthCredential = oAuthCredential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.deleteOAuthCredential = function(authenticationToken, serviceId, callback) {
    var mdef = Utility.deleteOAuthCredential;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.serviceId = serviceId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.deleteOAuthCredentialByEmailAndScope = function(authenticationToken, serviceId, email, scope, callback) {
    var mdef = Utility.deleteOAuthCredentialByEmailAndScope;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.serviceId = serviceId;
    args.email = email;
    args.scope = scope;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getUserCardScanningEndDate = function(authenticationToken, callback) {
    var mdef = Utility.getUserCardScanningEndDate;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getPromotionStatus = function(authenticationToken, promotionIds, callback) {
    var mdef = Utility.getPromotionStatus;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.promotionIds = promotionIds;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.promotionsShown = function(authenticationToken, promotionIds, callback) {
    var mdef = Utility.promotionsShown;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.promotionIds = promotionIds;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.promotionOptedOut = function(authenticationToken, promotionId, callback) {
    var mdef = Utility.promotionOptedOut;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.promotionId = promotionId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getRelatedContentSourcePreferences = function(authenticationToken, callback) {
    var mdef = Utility.getRelatedContentSourcePreferences;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.setRelatedContentSourceActivated = function(authenticationToken, sourceId, activated, callback) {
    var mdef = Utility.setRelatedContentSourceActivated;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.sourceId = sourceId;
    args.activated = activated;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.clearRelatedContentProfiles = function(authenticationToken, sourceId, callback) {
    var mdef = Utility.clearRelatedContentProfiles;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.sourceId = sourceId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.addRelatedContentProfiles = function(authenticationToken, profiles, callback) {
    var mdef = Utility.addRelatedContentProfiles;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.profiles = profiles;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.updateRelatedContentProfiles = function(authenticationToken, sourceId, callback) {
    var mdef = Utility.updateRelatedContentProfiles;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.sourceId = sourceId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getRelatedContentProfilePage = function(authenticationToken, profileId, callback) {
    var mdef = Utility.getRelatedContentProfilePage;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.profileId = profileId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.importNotesFromEnex = function(authenticationToken, enexUrl, notebookGuid, importNoteTags, importNoteCreated, importNoteUpdated, callback) {
    var mdef = Utility.importNotesFromEnex;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.enexUrl = enexUrl;
    args.notebookGuid = notebookGuid;
    args.importNoteTags = importNoteTags;
    args.importNoteCreated = importNoteCreated;
    args.importNoteUpdated = importNoteUpdated;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.setUserProfilePhoto = function(authenticationToken, photo, callback) {
    var mdef = Utility.setUserProfilePhoto;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.photo = photo;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.removeUserProfilePhoto = function(authenticationToken, callback) {
    var mdef = Utility.removeUserProfilePhoto;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.setUserFullName = function(authenticationToken, name, callback) {
    var mdef = Utility.setUserFullName;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.name = name;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getMessageInvitation = function(messageInvitationId, callback) {
    var mdef = Utility.getMessageInvitation;
    var args = new mdef.args();
    args.messageInvitationId = messageInvitationId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.claimMessageInvitation = function(authenticationToken, messageInvitationId, callback) {
    var mdef = Utility.claimMessageInvitation;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.messageInvitationId = messageInvitationId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.canPurchaseTeamStarterPack = function(authenticationToken, request, callback) {
    var mdef = Utility.canPurchaseTeamStarterPack;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getTsdEligibility = function(authenticationToken, request, callback) {
    var mdef = Utility.getTsdEligibility;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.updatePassword = function(authenticationToken, oldPassword, newPassword, callback) {
    var mdef = Utility.updatePassword;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.oldPassword = oldPassword;
    args.newPassword = newPassword;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getIncentiveEligibility = function(authenticationToken, callback) {
    var mdef = Utility.getIncentiveEligibility;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.invalidateGoogleOauthCredential = function(authToken, callback) {
    var mdef = Utility.invalidateGoogleOauthCredential;
    var args = new mdef.args();
    args.authToken = authToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.invalidateGoogleOauthCredentialByEmailAndScope = function(authToken, email, scope, callback) {
    var mdef = Utility.invalidateGoogleOauthCredentialByEmailAndScope;
    var args = new mdef.args();
    args.authToken = authToken;
    args.email = email;
    args.scope = scope;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.associateOpenIDWithUser = function(authenticationToken, credential, callback) {
    var mdef = Utility.associateOpenIDWithUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.credential = credential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.dissociateOpenIDFromUser = function(authenticationToken, credential, callback) {
    var mdef = Utility.dissociateOpenIDFromUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.credential = credential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.dissociateAllOpenIDsFromUser = function(authenticationToken, callback) {
    var mdef = Utility.dissociateAllOpenIDsFromUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.moveNotebookBetweenAccounts = function(sourceAuthenticationToken, targetAuthenticationToken, parameters, callback) {
    var mdef = Utility.moveNotebookBetweenAccounts;
    var args = new mdef.args();
    args.sourceAuthenticationToken = sourceAuthenticationToken;
    args.targetAuthenticationToken = targetAuthenticationToken;
    args.parameters = parameters;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.moveNotebooksBetweenAccounts = function(sourceAuthenticationToken, targetAuthenticationToken, parameters, callback) {
    var mdef = Utility.moveNotebooksBetweenAccounts;
    var args = new mdef.args();
    args.sourceAuthenticationToken = sourceAuthenticationToken;
    args.targetAuthenticationToken = targetAuthenticationToken;
    args.parameters = parameters;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.moveNoteBetweenAccounts = function(sourceAuthenticationToken, targetAuthenticationToken, parameters, callback) {
    var mdef = Utility.moveNoteBetweenAccounts;
    var args = new mdef.args();
    args.sourceAuthenticationToken = sourceAuthenticationToken;
    args.targetAuthenticationToken = targetAuthenticationToken;
    args.parameters = parameters;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.findNotesMetadataForIon = function(authenticationToken, filter, offset, maxNotes, resultSpec, callback) {
    var mdef = Utility.findNotesMetadataForIon;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.filter = filter;
    args.offset = offset;
    args.maxNotes = maxNotes;
    args.resultSpec = resultSpec;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.findNotesCardMetadata = function(authenticationToken, filter, offset, maxNotes, resultSpec, callback) {
    var mdef = Utility.findNotesCardMetadata;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.filter = filter;
    args.offset = offset;
    args.maxNotes = maxNotes;
    args.resultSpec = resultSpec;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getNotesCardMetadata = function(authenticationToken, noteGuids, resultSpec, callback) {
    var mdef = Utility.getNotesCardMetadata;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.noteGuids = noteGuids;
    args.resultSpec = resultSpec;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.createWorkspaceWithResultSpec = function(authenticationToken, workspace, spec, callback) {
    var mdef = Utility.createWorkspaceWithResultSpec;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspace = workspace;
    args.spec = spec;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.createWorkspace = function(authenticationToken, workspace, callback) {
    var mdef = Utility.createWorkspace;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspace = workspace;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.copyWorkspace = function(authenticationToken, spec, callback) {
    var mdef = Utility.copyWorkspace;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.spec = spec;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listSyncingNotebookGuidsInBusinessAccount = function(authenticationToken, callback) {
    var mdef = Utility.listSyncingNotebookGuidsInBusinessAccount;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getWorkspace = function(authenticationToken, workspaceGuid, responseSpec, callback) {
    var mdef = Utility.getWorkspace;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    args.responseSpec = responseSpec;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getWorkspaceIfUserHasPrivilege = function(authenticationToken, workspaceGuid, responseSpec, privilegeLevel, callback) {
    var mdef = Utility.getWorkspaceIfUserHasPrivilege;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    args.responseSpec = responseSpec;
    args.privilegeLevel = privilegeLevel;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listWorkspaces = function(authenticationToken, callback) {
    var mdef = Utility.listWorkspaces;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listWorkspacesWithResultSpec = function(authenticationToken, workspaceResponseSpec, filter, callback) {
    var mdef = Utility.listWorkspacesWithResultSpec;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceResponseSpec = workspaceResponseSpec;
    args.filter = filter;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.updateWorkspace = function(authenticationToken, workspace, callback) {
    var mdef = Utility.updateWorkspace;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspace = workspace;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.moveNotebookToAccount = function(authenticationToken, notebookGuid, callback) {
    var mdef = Utility.moveNotebookToAccount;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.notebookGuid = notebookGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.manageWorkspaceSharing = function(authenticationToken, request, callback) {
    var mdef = Utility.manageWorkspaceSharing;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.joinWorkspace = function(authenticationToken, workspaceGuid, callback) {
    var mdef = Utility.joinWorkspace;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.leaveWorkspace = function(authenticationToken, workspaceGuid, callback) {
    var mdef = Utility.leaveWorkspace;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.sendSharedNotebookViewedEvent = function(authenticationToken, notebookGuid, callback) {
    var mdef = Utility.sendSharedNotebookViewedEvent;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.notebookGuid = notebookGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.sendSharedNoteViewedEvent = function(authenticationToken, noteGuid, callback) {
    var mdef = Utility.sendSharedNoteViewedEvent;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.noteGuid = noteGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.sendWorkspaceViewedEvent = function(authenticationToken, workspaceGuid, callback) {
    var mdef = Utility.sendWorkspaceViewedEvent;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.expungeWorkspace = function(authenticationToken, workspaceGuid, callback) {
    var mdef = Utility.expungeWorkspace;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.createSurveyNote = function(authenticationToken, note, surveyId, callback) {
    var mdef = Utility.createSurveyNote;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.note = note;
    args.surveyId = surveyId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.createSurvey = function(authenticationToken, survey, callback) {
    var mdef = Utility.createSurvey;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.survey = survey;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.finalizeSurvey = function(authenticationToken, surveyId, callback) {
    var mdef = Utility.finalizeSurvey;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.surveyId = surveyId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.cloneSurvey = function(authenticationToken, surveyId, surveyName, copyRatings, copyComments, callback) {
    var mdef = Utility.cloneSurvey;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.surveyId = surveyId;
    args.surveyName = surveyName;
    args.copyRatings = copyRatings;
    args.copyComments = copyComments;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getLastOpenSurveyForEntity = function(authenticationToken, entityType, entityGuid, callback) {
    var mdef = Utility.getLastOpenSurveyForEntity;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.entityType = entityType;
    args.entityGuid = entityGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listSurveysForEntity = function(authenticationToken, entityType, entityGuid, callback) {
    var mdef = Utility.listSurveysForEntity;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.entityType = entityType;
    args.entityGuid = entityGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getSurveyItemForEntity = function(authenticationToken, entityType, entityGuid, surveyId, callback) {
    var mdef = Utility.getSurveyItemForEntity;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.entityType = entityType;
    args.entityGuid = entityGuid;
    args.surveyId = surveyId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.finalizeEntityForRating = function(authenticationToken, surveyId, entityType, entityGuid, category, callback) {
    var mdef = Utility.finalizeEntityForRating;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.surveyId = surveyId;
    args.entityType = entityType;
    args.entityGuid = entityGuid;
    args.category = category;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.updateAndFinalizeSurveyNote = function(authenticationToken, note, surveyId, category, callback) {
    var mdef = Utility.updateAndFinalizeSurveyNote;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.note = note;
    args.surveyId = surveyId;
    args.category = category;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.removeSurveyItem = function(authenticationToken, surveyId, surveyItemId, callback) {
    var mdef = Utility.removeSurveyItem;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.surveyId = surveyId;
    args.surveyItemId = surveyItemId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.saveSurveyItemRating = function(authenticationToken, surveyItemId, rating, callback) {
    var mdef = Utility.saveSurveyItemRating;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.surveyItemId = surveyItemId;
    args.rating = rating;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.saveSurveyItemComment = function(authenticationToken, surveyItemId, comment, callback) {
    var mdef = Utility.saveSurveyItemComment;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.surveyItemId = surveyItemId;
    args.comment = comment;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.addSurveyItemComment = function(authenticationToken, surveyItemId, comment, callback) {
    var mdef = Utility.addSurveyItemComment;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.surveyItemId = surveyItemId;
    args.comment = comment;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getConfigValuesAsJSON = function(authenticationToken, request, callback) {
    var mdef = Utility.getConfigValuesAsJSON;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.addAllUsersFromBusinessToSpace = function(authenticationToken, spaceGuid, callback) {
    var mdef = Utility.addAllUsersFromBusinessToSpace;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.spaceGuid = spaceGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listNotebooksForIonOnly = function(authenticationToken, callback) {
    var mdef = Utility.listNotebooksForIonOnly;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getMaxServiceUpdatedFromNotes = function(authenticationToken, notebookGuids, callback) {
    var mdef = Utility.getMaxServiceUpdatedFromNotes;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.notebookGuids = notebookGuids;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.addResource = function(authenticationToken, resource, callback) {
    var mdef = Utility.addResource;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.resource = resource;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.addResourceToNote = function(authenticationToken, resource, callback) {
    var mdef = Utility.addResourceToNote;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.resource = resource;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.updateNoteIfUsnMatches = function(authenticationToken, note, resourcesUpdateRequest, callback) {
    var mdef = Utility.updateNoteIfUsnMatches;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.note = note;
    args.resourcesUpdateRequest = resourcesUpdateRequest;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.createNote = function(authenticationToken, note, resourcesCreateRequest, callback) {
    var mdef = Utility.createNote;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.note = note;
    args.resourcesCreateRequest = resourcesCreateRequest;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listBetaFeatures = function(authenticationToken, callback) {
    var mdef = Utility.listBetaFeatures;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listBetaFeatureEnrollments = function(authenticationToken, callback) {
    var mdef = Utility.listBetaFeatureEnrollments;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.enrollInBetaFeature = function(authenticationToken, featureKey, callback) {
    var mdef = Utility.enrollInBetaFeature;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.featureKey = featureKey;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.enableBetaFeature = function(authenticationToken, featureKey, enrollmentGuid, enabled, callback) {
    var mdef = Utility.enableBetaFeature;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.featureKey = featureKey;
    args.enrollmentGuid = enrollmentGuid;
    args.enabled = enabled;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listEnabledFeatures = function(authenticationToken, callback) {
    var mdef = Utility.listEnabledFeatures;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.checkEnabledFeatures = function(authenticationToken, featureKeysToCheck, callback) {
    var mdef = Utility.checkEnabledFeatures;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.featureKeysToCheck = featureKeysToCheck;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.checkUserFeatures = function(authenticationToken, featureKeysToCheck, callback) {
    var mdef = Utility.checkUserFeatures;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.featureKeysToCheck = featureKeysToCheck;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getNotePermissionsForRTE = function(authenticationToken, noteGuid, callback) {
    var mdef = Utility.getNotePermissionsForRTE;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.noteGuid = noteGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.pinContentToWidget = function(authenticationToken, workspaceGuid, entityType, entityGuidOrUri, callback) {
    var mdef = Utility.pinContentToWidget;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    args.entityType = entityType;
    args.entityGuidOrUri = entityGuidOrUri;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.unpinContentFromWidget = function(authenticationToken, workspaceGuid, entityType, entityGuidOrUri, callback) {
    var mdef = Utility.unpinContentFromWidget;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    args.entityType = entityType;
    args.entityGuidOrUri = entityGuidOrUri;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listPinnedContent = function(authenticationToken, workspaceGuid, callback) {
    var mdef = Utility.listPinnedContent;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getWorkspaceNotebookSummary = function(authenticationToken, workspaceGuid, callback) {
    var mdef = Utility.getWorkspaceNotebookSummary;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.updateContentOfPinnedWidget = function(authenticationToken, workspaceGuid, toBePinnedContentList, toBeUnpinnedContentList, callback) {
    var mdef = Utility.updateContentOfPinnedWidget;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    args.toBePinnedContentList = toBePinnedContentList;
    args.toBeUnpinnedContentList = toBeUnpinnedContentList;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.changePinnedContentPosition = function(authenticationToken, workspaceGuid, request, callback) {
    var mdef = Utility.changePinnedContentPosition;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.workspaceGuid = workspaceGuid;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.requestAccessToWorkspace = function(authToken, workspaceGuid, callback) {
    var mdef = Utility.requestAccessToWorkspace;
    var args = new mdef.args();
    args.authToken = authToken;
    args.workspaceGuid = workspaceGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.listRecommendedNotes = function(authenticationToken, request, offset, maxNotes, callback) {
    var mdef = Utility.listRecommendedNotes;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    args.offset = offset;
    args.maxNotes = maxNotes;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getRecommendedNoteCardMetadata = function(authenticationToken, request, callback) {
    var mdef = Utility.getRecommendedNoteCardMetadata;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.submitRatingForRecommendedNote = function(authenticationToken, noteGuid, rating, engine, callback) {
    var mdef = Utility.submitRatingForRecommendedNote;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.noteGuid = noteGuid;
    args.rating = rating;
    args.engine = engine;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getFirebaseAuthCredential = function(authenticationToken, callback) {
    var mdef = Utility.getFirebaseAuthCredential;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getUserRestrictions = function(authenticationToken, callback) {
    var mdef = Utility.getUserRestrictions;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getNsvcThirdPartyAuthorizationToken = function(authenticationToken, callback) {
    var mdef = Utility.getNsvcThirdPartyAuthorizationToken;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getNsvcThirdPartyAuthorizationTokenByType = function(authenticationToken, tokenType, callback) {
    var mdef = Utility.getNsvcThirdPartyAuthorizationTokenByType;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.tokenType = tokenType;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.registerSession = function(request, callback) {
    var mdef = Utility.registerSession;
    var args = new mdef.args();
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.hasActiveSessions = function(request, callback) {
    var mdef = Utility.hasActiveSessions;
    var args = new mdef.args();
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.sendOneTimeCode = function(authenticationToken, sendToBackupPhone, messageTemplate, useVoice, callback) {
    var mdef = Utility.sendOneTimeCode;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.sendToBackupPhone = sendToBackupPhone;
    args.messageTemplate = messageTemplate;
    args.useVoice = useVoice;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.getMasked2FAMobileNumbers = function(authenticationToken, callback) {
    var mdef = Utility.getMasked2FAMobileNumbers;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.mmsvcGetPaywallState = function(authenticationToken, request, callback) {
    var mdef = Utility.mmsvcGetPaywallState;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.mmsvcCreateDeviceSync = function(authenticationToken, callback) {
    var mdef = Utility.mmsvcCreateDeviceSync;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  UtilityClient.prototype.revokeSession = function(request, callback) {
    var mdef = Utility.revokeSession;
    var args = new mdef.args();
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.Utility.Client = UtilityClient;

  // Define Utility Server

  function UtilityServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in Utility) {
        if (service[methodName]) {
          this.processor.addMethod(Utility[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  UtilityServer.prototype.start = function () {
    this.stransport.listen();
  };
  UtilityServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.Utility.Server = UtilityServer;


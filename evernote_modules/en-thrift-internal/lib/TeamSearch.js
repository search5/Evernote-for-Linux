//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var Errors = require('./Errors');
  var Types = require('./Types');


  module.exports.ETNoteSortOrder = {
    'CREATED' : 1,
    'UPDATED' : 2,
    'RELEVANCE' : 3,
    'UPDATE_SEQUENCE_NUMBER' : 4,
    'TITLE' : 5
  };

  module.exports.SearchScope = Thrift.Struct.define('SearchScope',  {
    1: { alias: 'noteGuids', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    2: { alias: 'notebookGuids', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  }
  });

  module.exports.ETNoteFilter = Thrift.Struct.define('ETNoteFilter',  {
    1: { alias: 'teamGuid', type: Thrift.Type.STRING },
    2: { alias: 'userGuid', type: Thrift.Type.STRING },
    3: { alias: 'queryText', type: Thrift.Type.STRING },
    4: { alias: 'order', type: Thrift.Type.I32 },
    5: { alias: 'filters', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    6: { alias: 'scope', type: Thrift.Type.STRUCT, def: module.exports.SearchScope },
    7: { alias: 'sessionGuid', type: Thrift.Type.STRING },
    8: { alias: 'notebookGuid', type: Thrift.Type.STRING },
    9: { alias: 'includeAllReadableNotebooks', type: Thrift.Type.BOOL }
  });

  module.exports.NoteAttribute = Thrift.Struct.define('NoteAttribute',  {
    1: { alias: 'attrName', type: Thrift.Type.STRING },
    2: { alias: 'attrValue', type: Thrift.Type.STRING }
  });

  module.exports.NoteResult = Thrift.Struct.define('NoteResult',  {
    1: { alias: 'noteGuid', type: Thrift.Type.STRING },
    2: { alias: 'score', type: Thrift.Type.DOUBLE },
    3: { alias: 'attributes', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.NoteAttribute)  }
  });

  module.exports.SearchResult = Thrift.Struct.define('SearchResult',  {
    1: { alias: 'totalNotes', type: Thrift.Type.I32 },
    2: { alias: 'noteResults', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.NoteResult)  },
    3: { alias: 'sessionGuid', type: Thrift.Type.STRING }
  });

  module.exports.SearchResultSpec = Thrift.Struct.define('SearchResultSpec',  {
    1: { alias: 'splitting', type: Thrift.Type.BOOL },
    2: { alias: 'outputDetailsLevel', type: Thrift.Type.I32 }
  });

  module.exports.ETQuery = Thrift.Struct.define('ETQuery',  {
    1: { alias: 'noteFilter', type: Thrift.Type.STRUCT, def: module.exports.ETNoteFilter },
    2: { alias: 'offset', type: Thrift.Type.I32 },
    3: { alias: 'maxNotes', type: Thrift.Type.I32 },
    4: { alias: 'searchResultSpec', type: Thrift.Type.STRUCT, def: module.exports.SearchResultSpec },
    5: { alias: 'finalQuery', type: Thrift.Type.BOOL }
  });

  module.exports.SearchSuggestion = Thrift.Struct.define('SearchSuggestion',  {
    1: { alias: 'status', type: Thrift.Type.I32 },
    2: { alias: 'history', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    3: { alias: 'suggestions', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    4: { alias: 'categories', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    5: { alias: 'userGuids', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    6: { alias: 'notebookGuids', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    7: { alias: 'tagGuids', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    8: { alias: 'sessionGuid', type: Thrift.Type.STRING }
  });

  var TeamSearch = module.exports.TeamSearch = {};

  TeamSearch.queryNotes = Thrift.Method.define({
    alias: 'queryNotes',
    args: Thrift.Struct.define('queryNotesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'query', type: Thrift.Type.STRUCT, def: module.exports.ETQuery, index: 1 }
    }),
    result: Thrift.Struct.define('queryNotesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.SearchResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  TeamSearch.querySuggestion = Thrift.Method.define({
    alias: 'querySuggestion',
    args: Thrift.Struct.define('querySuggestionArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'noteFilter', type: Thrift.Type.STRUCT, def: module.exports.ETNoteFilter, index: 1 }
    }),
    result: Thrift.Struct.define('querySuggestionResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.SearchSuggestion },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  // Define TeamSearch Client

  function TeamSearchClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  TeamSearchClient.prototype.queryNotes = function(authenticationToken, query, callback) {
    var mdef = TeamSearch.queryNotes;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.query = query;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  TeamSearchClient.prototype.querySuggestion = function(authenticationToken, noteFilter, callback) {
    var mdef = TeamSearch.querySuggestion;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.noteFilter = noteFilter;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.TeamSearch.Client = TeamSearchClient;

  // Define TeamSearch Server

  function TeamSearchServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in TeamSearch) {
        if (service[methodName]) {
          this.processor.addMethod(TeamSearch[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  TeamSearchServer.prototype.start = function () {
    this.stransport.listen();
  };
  TeamSearchServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.TeamSearch.Server = TeamSearchServer;


//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var Errors = require('./Errors');
  var CommunicationEngineTypes = require('./CommunicationEngineTypes');
  var CommunicationEngineTypesV2 = require('./CommunicationEngineTypesV2');


  var CommunicationEngine = module.exports.CommunicationEngine = {};

  CommunicationEngine.getMessages = Thrift.Method.define({
    alias: 'getMessages',
    args: Thrift.Struct.define('getMessagesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: CommunicationEngineTypes.MessageRequest, index: 1 }
    }),
    result: Thrift.Struct.define('getMessagesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: CommunicationEngineTypes.MessageResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  CommunicationEngine.syncMessages = Thrift.Method.define({
    alias: 'syncMessages',
    args: Thrift.Struct.define('syncMessagesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: CommunicationEngineTypesV2.MessageRequest, index: 1 }
    }),
    result: Thrift.Struct.define('syncMessagesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: CommunicationEngineTypesV2.MessageResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  // Define CommunicationEngine Client

  function CommunicationEngineClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  CommunicationEngineClient.prototype.getMessages = function(authenticationToken, request, callback) {
    var mdef = CommunicationEngine.getMessages;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  CommunicationEngineClient.prototype.syncMessages = function(authenticationToken, request, callback) {
    var mdef = CommunicationEngine.syncMessages;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.CommunicationEngine.Client = CommunicationEngineClient;

  // Define CommunicationEngine Server

  function CommunicationEngineServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in CommunicationEngine) {
        if (service[methodName]) {
          this.processor.addMethod(CommunicationEngine[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  CommunicationEngineServer.prototype.start = function () {
    this.stransport.listen();
  };
  CommunicationEngineServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.CommunicationEngine.Server = CommunicationEngineServer;


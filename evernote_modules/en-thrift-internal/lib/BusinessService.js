//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var Errors = require('./Errors');
  var Types = require('./Types');
  var NoteStore = require('./NoteStore');
  var SpaceService = require('./SpaceService');


  module.exports.NoteShareAdminShareType = {
    'SHARED_WITH_BUSINESS' : 0,
    'SHARED_BY_PUBLIC_LINK' : 1,
    'SHARED_WITH_INTERNAL_INDIVIDUAL' : 2,
    'SHARED_WITH_EXTERNAL_INDIVIDUAL' : 3
  };

  module.exports.RecommendationReasonType = {
    'NOTE_CREATOR' : 0,
    'NOTE_EDITOR' : 1,
    'NOTEBOOK_CONTRIBUTOR' : 2,
    'NOTEBOOK_MEMBER' : 3,
    'POPULAR' : 4,
    'NOTEBOOK_RECENT_CONTRIBUTOR' : 5,
    'RELATED_CONTENT' : 6,
    'USER_HISTORY' : 7,
    'NOTEBOOK_ACTIVE_CONTRIBUTOR' : 8
  };

  module.exports.NoteRecommendationEventType = {
    'NOTE_CREATED' : 0,
    'NOTE_UPDATED' : 1
  };

  module.exports.EducationCardType = {
    'CREATE_BUSINESS_NOTEBOOK' : 0,
    'CREATE_BUSINESS_NOTE' : 1,
    'START_WORKCHAT' : 2,
    'INSTALL_WEBCLIPPER' : 3,
    'LEARN_CONTEXT' : 4,
    'PUBLISH_BUSINESS_NOTEBOOK' : 5
  };

  module.exports.BusinessAutoApproveDomain = Thrift.Struct.define('BusinessAutoApproveDomain',  {
    1: { alias: 'emailDomain', type: Thrift.Type.STRING },
    2: { alias: 'confirmed', type: Thrift.Type.BOOL }
  });

  module.exports.NoteShareAdminFilter = Thrift.Struct.define('NoteShareAdminFilter',  {
    1: { alias: 'shareType', type: Thrift.Type.I32 },
    2: { alias: 'query', type: Thrift.Type.STRING },
    3: { alias: 'minPrivilegeLevel', type: Thrift.Type.I32 },
    4: { alias: 'startAt', type: Thrift.Type.I32 }
  });

  module.exports.NoteShareAdminResult = Thrift.Struct.define('NoteShareAdminResult',  {
    1: { alias: 'endsAt', type: Thrift.Type.I32 },
    2: { alias: 'hasMoreNoteShares', type: Thrift.Type.BOOL },
    3: { alias: 'notes', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, Types.Note)  },
    4: { alias: 'notebooks', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.STRUCT, Types.Notebook)  },
    5: { alias: 'users', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.I32, Thrift.Type.STRUCT, Types.User)  },
    6: { alias: 'identities', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.I64, Thrift.Type.STRUCT, Types.Identity)  },
    7: { alias: 'shareRelationships', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.STRUCT, NoteStore.NoteShareRelationships)  },
    8: { alias: 'workspaces', type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.STRING, Thrift.Type.STRUCT, SpaceService.Workspace)  }
  });

  module.exports.RecommendationReason = Thrift.Struct.define('RecommendationReason',  {
    1: { alias: 'reasonType', type: Thrift.Type.I32 },
    2: { alias: 'guid', type: Thrift.Type.STRING }
  });

  module.exports.NoteRecommendationEvent = Thrift.Struct.define('NoteRecommendationEvent',  {
    1: { alias: 'eventType', type: Thrift.Type.I32 },
    2: { alias: 'timestamp', type: Thrift.Type.I64 },
    3: { alias: 'userIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32)  },
    4: { alias: 'unlistedUserIdCount', type: Thrift.Type.I32 }
  });

  module.exports.RecommendedNote = Thrift.Struct.define('RecommendedNote',  {
    1: { alias: 'noteMetadata', type: Thrift.Type.STRUCT, def: NoteStore.NoteMetadata },
    2: { alias: 'activeUserIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32)  },
    3: { alias: 'snippetText', type: Thrift.Type.STRING },
    4: { alias: 'reason', type: Thrift.Type.STRUCT, def: module.exports.RecommendationReason },
    5: { alias: 'event', type: Thrift.Type.STRUCT, def: module.exports.NoteRecommendationEvent },
    6: { alias: 'canShare', type: Thrift.Type.BOOL },
    7: { alias: 'largestResourceFileName', type: Thrift.Type.STRING },
    8: { alias: 'largestResourceGuid', type: Thrift.Type.STRING }
  });

  module.exports.RecommendedNotebook = Thrift.Struct.define('RecommendedNotebook',  {
    1: { alias: 'guid', type: Thrift.Type.STRING },
    2: { alias: 'activeUserIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32)  },
    3: { alias: 'reason', type: Thrift.Type.STRUCT, def: module.exports.RecommendationReason }
  });

  module.exports.EducationCard = Thrift.Struct.define('EducationCard',  {
    1: { alias: 'educationCardType', type: Thrift.Type.I32 },
    2: { alias: 'promotionId', type: Thrift.Type.STRING },
    3: { alias: 'objectId', type: Thrift.Type.STRING }
  });

  module.exports.BusinessSummary = Thrift.Struct.define('BusinessSummary',  {
    1: { alias: 'recommendedNotes', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.RecommendedNote)  },
    2: { alias: 'recommendedNotebooks', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.RecommendedNotebook)  },
    3: { alias: 'trendingNotebooks', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.RecommendedNotebook)  },
    4: { alias: 'recommendedArticles', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, Types.RelatedContent)  },
    5: { alias: 'educationCards', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.EducationCard)  },
    6: { alias: 'summaryPeriodStart', type: Thrift.Type.I64 },
    7: { alias: 'summaryPeriodEnd', type: Thrift.Type.I64 },
    8: { alias: 'updated', type: Thrift.Type.I64 },
    9: { alias: 'debugInfo', type: Thrift.Type.STRING }
  });

  module.exports.BusinessSummaryResultSpec = Thrift.Struct.define('BusinessSummaryResultSpec',  {
    1: { alias: 'includeDebugInfo', type: Thrift.Type.BOOL }
  });

  module.exports.BusinessSummaryNotificationResult = Thrift.Struct.define('BusinessSummaryNotificationResult',  {
    1: { alias: 'topActiveUserIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32)  },
    2: { alias: 'totalActiveUsers', type: Thrift.Type.I32 }
  });

  module.exports.SecurityDetails = Thrift.Struct.define('SecurityDetails',  {
    1: { alias: 'twoFactorEnabled', type: Thrift.Type.BOOL }
  });

  module.exports.UserProfileWithSecurityDetails = Thrift.Struct.define('UserProfileWithSecurityDetails',  {
    1: { alias: 'userProfile', type: Thrift.Type.STRUCT, def: Types.UserProfile },
    2: { alias: 'securityDetails', type: Thrift.Type.STRUCT, def: module.exports.SecurityDetails },
    3: { alias: 'status', type: Thrift.Type.I32 },
    4: { alias: 'serviceLevel', type: Thrift.Type.I32 },
    5: { alias: 'facadeUser', type: Thrift.Type.BOOL },
    6: { alias: 'serviceLevelV2', type: Thrift.Type.I32 }
  });

  module.exports.ClientAccessEntriesPage = Thrift.Struct.define('ClientAccessEntriesPage',  {
    1: { alias: 'entries', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, Types.ClientAccessEntry)  },
    2: { alias: 'hasMore', type: Thrift.Type.BOOL }
  });

  module.exports.ServiceAccessEntriesPage = Thrift.Struct.define('ServiceAccessEntriesPage',  {
    1: { alias: 'entries', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, Types.ServiceAccessEntry)  },
    2: { alias: 'hasMore', type: Thrift.Type.BOOL }
  });

  module.exports.BusinessAppTokenMetadata = Thrift.Struct.define('BusinessAppTokenMetadata',  {
    1: { alias: 'created', type: Thrift.Type.I64 },
    2: { alias: 'expires', type: Thrift.Type.I64 }
  });

  module.exports.CreateBusinessAppTokenResponse = Thrift.Struct.define('CreateBusinessAppTokenResponse',  {
    1: { alias: 'token', type: Thrift.Type.STRING },
    2: { alias: 'metadata', type: Thrift.Type.STRUCT, def: module.exports.BusinessAppTokenMetadata }
  });

  var BusinessService = module.exports.BusinessService = {};

  BusinessService.findNoteShares = Thrift.Method.define({
    alias: 'findNoteShares',
    args: Thrift.Struct.define('findNoteSharesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'filter', type: Thrift.Type.STRUCT, def: module.exports.NoteShareAdminFilter, index: 1 }
    }),
    result: Thrift.Struct.define('findNoteSharesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.NoteShareAdminResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  BusinessService.getBusinessSummary = Thrift.Method.define({
    alias: 'getBusinessSummary',
    args: Thrift.Struct.define('getBusinessSummaryArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'resultSpec', type: Thrift.Type.STRUCT, def: module.exports.BusinessSummaryResultSpec, index: 1 }
    }),
    result: Thrift.Struct.define('getBusinessSummaryResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessSummary },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  BusinessService.getBusinessSummaryNotificationDetails = Thrift.Method.define({
    alias: 'getBusinessSummaryNotificationDetails',
    args: Thrift.Struct.define('getBusinessSummaryNotificationDetailsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('getBusinessSummaryNotificationDetailsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessSummaryNotificationResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  BusinessService.listBusinessInvitations = Thrift.Method.define({
    alias: 'listBusinessInvitations',
    args: Thrift.Struct.define('listBusinessInvitationsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listBusinessInvitationsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, Types.BusinessInvitation)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.approveInvitations = Thrift.Method.define({
    alias: 'approveInvitations',
    args: Thrift.Struct.define('approveInvitationsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'emails', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING) , index: 1 }
    }),
    result: Thrift.Struct.define('approveInvitationsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, Types.BusinessInvitation)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.removeInvitations = Thrift.Method.define({
    alias: 'removeInvitations',
    args: Thrift.Struct.define('removeInvitationsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'emails', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING) , index: 1 }
    }),
    result: Thrift.Struct.define('removeInvitationsResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.listBusinessUserProfilesWithSecurityDetails = Thrift.Method.define({
    alias: 'listBusinessUserProfilesWithSecurityDetails',
    args: Thrift.Struct.define('listBusinessUserProfilesWithSecurityDetailsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listBusinessUserProfilesWithSecurityDetailsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.UserProfileWithSecurityDetails)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.listBusinessUsersProfileInfoWithSecurityDetails = Thrift.Method.define({
    alias: 'listBusinessUsersProfileInfoWithSecurityDetails',
    args: Thrift.Struct.define('listBusinessUsersProfileInfoWithSecurityDetailsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userProfileInfoRequest', type: Thrift.Type.STRUCT, def: Types.UserProfileInfoRequest, index: 1 }
    }),
    result: Thrift.Struct.define('listBusinessUsersProfileInfoWithSecurityDetailsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.UserProfileWithSecurityDetails)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.setBusinessUserRole = Thrift.Method.define({
    alias: 'setBusinessUserRole',
    args: Thrift.Struct.define('setBusinessUserRoleArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'role', type: Thrift.Type.I32, index: 2 }
    }),
    result: Thrift.Struct.define('setBusinessUserRoleResult', {
      1: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.setBusinessEmailForUser = Thrift.Method.define({
    alias: 'setBusinessEmailForUser',
    args: Thrift.Struct.define('setBusinessEmailForUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'email', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('setBusinessEmailForUserResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  BusinessService.getClientAccessHistoryForUser = Thrift.Method.define({
    alias: 'getClientAccessHistoryForUser',
    args: Thrift.Struct.define('getClientAccessHistoryForUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'startDateInMillis', type: Thrift.Type.I64, index: 1 },
      3: { alias: 'endDateInMillis', type: Thrift.Type.I64, index: 2 },
      4: { alias: 'pageSize', type: Thrift.Type.I32, index: 3 },
      5: { alias: 'before', type: Thrift.Type.STRUCT, def: Types.ClientAccessEntry, index: 4 }
    }),
    result: Thrift.Struct.define('getClientAccessHistoryForUserResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.ClientAccessEntriesPage },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.getServiceAccessHistoryForUser = Thrift.Method.define({
    alias: 'getServiceAccessHistoryForUser',
    args: Thrift.Struct.define('getServiceAccessHistoryForUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'startDateInMillis', type: Thrift.Type.I64, index: 1 },
      3: { alias: 'endDateInMillis', type: Thrift.Type.I64, index: 2 },
      4: { alias: 'pageSize', type: Thrift.Type.I32, index: 3 },
      5: { alias: 'before', type: Thrift.Type.STRUCT, def: Types.ServiceAccessEntry, index: 4 }
    }),
    result: Thrift.Struct.define('getServiceAccessHistoryForUserResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.ServiceAccessEntriesPage },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.isAvailableForAutoApproval = Thrift.Method.define({
    alias: 'isAvailableForAutoApproval',
    args: Thrift.Struct.define('isAvailableForAutoApprovalArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'emailDomain', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('isAvailableForAutoApprovalResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException }
    })
  });

  BusinessService.listAutoApproveDomains = Thrift.Method.define({
    alias: 'listAutoApproveDomains',
    args: Thrift.Struct.define('listAutoApproveDomainsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listAutoApproveDomainsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRUCT, module.exports.BusinessAutoApproveDomain) },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.listJoinableAutoApproveDomains = Thrift.Method.define({
    alias: 'listJoinableAutoApproveDomains',
    args: Thrift.Struct.define('listJoinableAutoApproveDomainsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listJoinableAutoApproveDomainsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING) },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.removeAutoApproveDomain = Thrift.Method.define({
    alias: 'removeAutoApproveDomain',
    args: Thrift.Struct.define('removeAutoApproveDomainArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'domain', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('removeAutoApproveDomainResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.reserveAutoApproveDomain = Thrift.Method.define({
    alias: 'reserveAutoApproveDomain',
    args: Thrift.Struct.define('reserveAutoApproveDomainArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'confirmationEmail', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('reserveAutoApproveDomainResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessAutoApproveDomain },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.resendAutoApproveDomainConfirmationEmail = Thrift.Method.define({
    alias: 'resendAutoApproveDomainConfirmationEmail',
    args: Thrift.Struct.define('resendAutoApproveDomainConfirmationEmailArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'domain', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('resendAutoApproveDomainConfirmationEmailResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.getDisplayNamesForExternalUsers = Thrift.Method.define({
    alias: 'getDisplayNamesForExternalUsers',
    args: Thrift.Struct.define('getDisplayNamesForExternalUsersArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32) , index: 1 }
    }),
    result: Thrift.Struct.define('getDisplayNamesForExternalUsersResult', {
      0: { alias: 'returnValue',type: Thrift.Type.MAP, def: Thrift.Map.define(Thrift.Type.I32, Thrift.Type.STRING )  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.revokeAccess = Thrift.Method.define({
    alias: 'revokeAccess',
    args: Thrift.Struct.define('revokeAccessArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('revokeAccessResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  BusinessService.revokeAccessForBobMigration = Thrift.Method.define({
    alias: 'revokeAccessForBobMigration',
    args: Thrift.Struct.define('revokeAccessForBobMigrationArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'legacyUserId', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'withFacade', type: Thrift.Type.BOOL, index: 2 },
      4: { alias: 'bobUserId', type: Thrift.Type.I32, index: 3 }
    }),
    result: Thrift.Struct.define('revokeAccessForBobMigrationResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  BusinessService.deactivateBusinessUser = Thrift.Method.define({
    alias: 'deactivateBusinessUser',
    args: Thrift.Struct.define('deactivateBusinessUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('deactivateBusinessUserResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  BusinessService.reactivateBusinessUserAndChargeBusiness = Thrift.Method.define({
    alias: 'reactivateBusinessUserAndChargeBusiness',
    args: Thrift.Struct.define('reactivateBusinessUserAndChargeBusinessArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('reactivateBusinessUserAndChargeBusinessResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  BusinessService.createAccessToken = Thrift.Method.define({
    alias: 'createAccessToken',
    args: Thrift.Struct.define('createAccessTokenArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'tokenType', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('createAccessTokenResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.CreateBusinessAppTokenResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.revokeAccessToken = Thrift.Method.define({
    alias: 'revokeAccessToken',
    args: Thrift.Struct.define('revokeAccessTokenArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'tokenType', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('revokeAccessTokenResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  BusinessService.getAccessTokenMetadata = Thrift.Method.define({
    alias: 'getAccessTokenMetadata',
    args: Thrift.Struct.define('getAccessTokenMetadataArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'tokenType', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('getAccessTokenMetadataResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessAppTokenMetadata },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  // Define BusinessService Client

  function BusinessServiceClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  BusinessServiceClient.prototype.findNoteShares = function(authenticationToken, filter, callback) {
    var mdef = BusinessService.findNoteShares;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.filter = filter;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.getBusinessSummary = function(authenticationToken, resultSpec, callback) {
    var mdef = BusinessService.getBusinessSummary;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.resultSpec = resultSpec;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.getBusinessSummaryNotificationDetails = function(authenticationToken, callback) {
    var mdef = BusinessService.getBusinessSummaryNotificationDetails;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.listBusinessInvitations = function(authenticationToken, callback) {
    var mdef = BusinessService.listBusinessInvitations;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.approveInvitations = function(authenticationToken, emails, callback) {
    var mdef = BusinessService.approveInvitations;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.emails = emails;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.removeInvitations = function(authenticationToken, emails, callback) {
    var mdef = BusinessService.removeInvitations;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.emails = emails;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.listBusinessUserProfilesWithSecurityDetails = function(authenticationToken, callback) {
    var mdef = BusinessService.listBusinessUserProfilesWithSecurityDetails;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.listBusinessUsersProfileInfoWithSecurityDetails = function(authenticationToken, userProfileInfoRequest, callback) {
    var mdef = BusinessService.listBusinessUsersProfileInfoWithSecurityDetails;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userProfileInfoRequest = userProfileInfoRequest;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.setBusinessUserRole = function(authenticationToken, userId, role, callback) {
    var mdef = BusinessService.setBusinessUserRole;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userId = userId;
    args.role = role;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.setBusinessEmailForUser = function(authenticationToken, userId, email, callback) {
    var mdef = BusinessService.setBusinessEmailForUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userId = userId;
    args.email = email;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.getClientAccessHistoryForUser = function(authenticationToken, startDateInMillis, endDateInMillis, pageSize, before, callback) {
    var mdef = BusinessService.getClientAccessHistoryForUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.startDateInMillis = startDateInMillis;
    args.endDateInMillis = endDateInMillis;
    args.pageSize = pageSize;
    args.before = before;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.getServiceAccessHistoryForUser = function(authenticationToken, startDateInMillis, endDateInMillis, pageSize, before, callback) {
    var mdef = BusinessService.getServiceAccessHistoryForUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.startDateInMillis = startDateInMillis;
    args.endDateInMillis = endDateInMillis;
    args.pageSize = pageSize;
    args.before = before;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.isAvailableForAutoApproval = function(authenticationToken, emailDomain, callback) {
    var mdef = BusinessService.isAvailableForAutoApproval;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.emailDomain = emailDomain;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.listAutoApproveDomains = function(authenticationToken, callback) {
    var mdef = BusinessService.listAutoApproveDomains;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.listJoinableAutoApproveDomains = function(authenticationToken, callback) {
    var mdef = BusinessService.listJoinableAutoApproveDomains;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.removeAutoApproveDomain = function(authenticationToken, domain, callback) {
    var mdef = BusinessService.removeAutoApproveDomain;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.domain = domain;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.reserveAutoApproveDomain = function(authenticationToken, confirmationEmail, callback) {
    var mdef = BusinessService.reserveAutoApproveDomain;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.confirmationEmail = confirmationEmail;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.resendAutoApproveDomainConfirmationEmail = function(authenticationToken, domain, callback) {
    var mdef = BusinessService.resendAutoApproveDomainConfirmationEmail;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.domain = domain;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.getDisplayNamesForExternalUsers = function(authenticationToken, userIds, callback) {
    var mdef = BusinessService.getDisplayNamesForExternalUsers;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userIds = userIds;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.revokeAccess = function(authenticationToken, userId, callback) {
    var mdef = BusinessService.revokeAccess;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userId = userId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.revokeAccessForBobMigration = function(authenticationToken, legacyUserId, withFacade, bobUserId, callback) {
    var mdef = BusinessService.revokeAccessForBobMigration;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.legacyUserId = legacyUserId;
    args.withFacade = withFacade;
    args.bobUserId = bobUserId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.deactivateBusinessUser = function(authenticationToken, userId, callback) {
    var mdef = BusinessService.deactivateBusinessUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userId = userId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.reactivateBusinessUserAndChargeBusiness = function(authenticationToken, userId, callback) {
    var mdef = BusinessService.reactivateBusinessUserAndChargeBusiness;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userId = userId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.createAccessToken = function(authenticationToken, tokenType, callback) {
    var mdef = BusinessService.createAccessToken;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.tokenType = tokenType;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.revokeAccessToken = function(authenticationToken, tokenType, callback) {
    var mdef = BusinessService.revokeAccessToken;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.tokenType = tokenType;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  BusinessServiceClient.prototype.getAccessTokenMetadata = function(authenticationToken, tokenType, callback) {
    var mdef = BusinessService.getAccessTokenMetadata;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.tokenType = tokenType;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.BusinessService.Client = BusinessServiceClient;

  // Define BusinessService Server

  function BusinessServiceServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in BusinessService) {
        if (service[methodName]) {
          this.processor.addMethod(BusinessService[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  BusinessServiceServer.prototype.start = function () {
    this.stransport.listen();
  };
  BusinessServiceServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.BusinessService.Server = BusinessServiceServer;


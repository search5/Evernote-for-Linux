//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var AuthenticationErrors = require('./AuthenticationErrors');
  var AuthenticationTypes = require('./AuthenticationTypes');
  var Errors = require('./Errors');
  var UserStore = require('./UserStore');


  module.exports.AuthenticationCredentialType = {
    'USERNAME_PASSWORD' : 0,
    'OPEN_ID' : 1,
    'SSO_LOGIN_TOKEN' : 2,
    'EXCHANGE_TOKEN' : 3,
    'NAP_USERNAME_PASSWORD' : 4,
    'NAP_OAUTH' : 5,
    'NAP_SAML' : 6,
    'NAP_JWT' : 7,
    'NAP_REFRESH' : 8
  };

  module.exports.AuthenticationCredential = Thrift.Struct.define('AuthenticationCredential',  {
    1: { alias: 'type', type: Thrift.Type.I32 },
    2: { alias: 'usernameOrEmail', type: Thrift.Type.STRING },
    3: { alias: 'password', type: Thrift.Type.STRING },
    4: { alias: 'openIdCredential', type: Thrift.Type.STRUCT, def: AuthenticationTypes.OpenIdCredential },
    5: { alias: 'ssoLoginToken', type: Thrift.Type.STRING },
    6: { alias: 'exchangeToken', type: Thrift.Type.STRING },
    7: { alias: 'uid', type: Thrift.Type.STRING },
    8: { alias: 'provider', type: Thrift.Type.STRING },
    9: { alias: 'authenticationToken', type: Thrift.Type.STRING }
  });

  module.exports.InternalAuthenticationParams = Thrift.Struct.define('InternalAuthenticationParams',  {
    1: { alias: 'credential', type: Thrift.Type.STRUCT, def: module.exports.AuthenticationCredential },
    2: { alias: 'consumerKey', type: Thrift.Type.STRING },
    3: { alias: 'consumerSecret', type: Thrift.Type.STRING },
    4: { alias: 'authLongSession', type: Thrift.Type.BOOL },
    5: { alias: 'deviceId', type: Thrift.Type.STRING },
    6: { alias: 'deviceDescription', type: Thrift.Type.STRING },
    7: { alias: 'twoFactorSupported', type: Thrift.Type.BOOL },
    8: { alias: 'skipSecondFactor', type: Thrift.Type.BOOL },
    9: { alias: 'businessOnlySupported', type: Thrift.Type.BOOL }
  });

  var AuthenticationService = module.exports.AuthenticationService = {};

  AuthenticationService.authenticate = Thrift.Method.define({
    alias: 'authenticate',
    args: Thrift.Struct.define('authenticateArgs', {
      1: { alias: 'params', type: Thrift.Type.STRUCT, def: module.exports.InternalAuthenticationParams, index: 0 }
    }),
    result: Thrift.Struct.define('authenticateResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: UserStore.AuthenticationResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AuthenticationService.authenticateOpenID = Thrift.Method.define({
    alias: 'authenticateOpenID',
    args: Thrift.Struct.define('authenticateOpenIDArgs', {
      1: { alias: 'credential', type: Thrift.Type.STRUCT, def: AuthenticationTypes.OpenIdCredential, index: 0 }
    }),
    result: Thrift.Struct.define('authenticateOpenIDResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: AuthenticationTypes.AuthenticationRequestResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.UserNotFoundException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException },
      3: { alias: 'formatException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.BadOpenIDException }
    })
  });

  AuthenticationService.validateUserForOAuth = Thrift.Method.define({
    alias: 'validateUserForOAuth',
    args: Thrift.Struct.define('validateUserForOAuthArgs', {
      1: { alias: 'uid', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'email', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'provider', type: Thrift.Type.I32, index: 2 }
    }),
    result: Thrift.Struct.define('validateUserForOAuthResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: AuthenticationTypes.AuthenticationRequestResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.UserNotFoundException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException }
    })
  });

  AuthenticationService.registerUser = Thrift.Method.define({
    alias: 'registerUser',
    args: Thrift.Struct.define('registerUserArgs', {
      1: { alias: 'credential', type: Thrift.Type.STRUCT, def: AuthenticationTypes.PlainCredential, index: 0 }
    }),
    result: Thrift.Struct.define('registerUserResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: AuthenticationTypes.RegistrationRequestResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException }
    })
  });

  AuthenticationService.validateForRegistration = Thrift.Method.define({
    alias: 'validateForRegistration',
    args: Thrift.Struct.define('validateForRegistrationArgs', {
      1: { alias: 'credential', type: Thrift.Type.STRUCT, def: AuthenticationTypes.OpenIdCredential, index: 0 }
    }),
    result: Thrift.Struct.define('validateForRegistrationResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: AuthenticationTypes.RegistrationRequestResult },
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException },
      2: { alias: 'formatException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.BadOpenIDException }
    })
  });

  AuthenticationService.associateOpenIDWithUser = Thrift.Method.define({
    alias: 'associateOpenIDWithUser',
    args: Thrift.Struct.define('associateOpenIDWithUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'credential', type: Thrift.Type.STRUCT, def: AuthenticationTypes.OpenIdCredential, index: 1 }
    }),
    result: Thrift.Struct.define('associateOpenIDWithUserResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException },
      2: { alias: 'formatException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.BadOpenIDException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.UserException }
    })
  });

  AuthenticationService.dissociateOpenIDFromUser = Thrift.Method.define({
    alias: 'dissociateOpenIDFromUser',
    args: Thrift.Struct.define('dissociateOpenIDFromUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'credential', type: Thrift.Type.STRUCT, def: AuthenticationTypes.OpenIdCredential, index: 1 }
    }),
    result: Thrift.Struct.define('dissociateOpenIDFromUserResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException },
      2: { alias: 'formatException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.BadOpenIDException },
      3: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.UserException }
    })
  });

  AuthenticationService.updatePassword = Thrift.Method.define({
    alias: 'updatePassword',
    args: Thrift.Struct.define('updatePasswordArgs', {
      1: { alias: 'userId', type: Thrift.Type.I32, index: 0 },
      2: { alias: 'oldPassword', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'newPassword', type: Thrift.Type.STRING, index: 2 }
    }),
    result: Thrift.Struct.define('updatePasswordResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.UserNotFoundException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException }
    })
  });

  AuthenticationService.dissociateAllOpenIDsFromUser = Thrift.Method.define({
    alias: 'dissociateAllOpenIDsFromUser',
    args: Thrift.Struct.define('dissociateAllOpenIDsFromUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('dissociateAllOpenIDsFromUserResult', {
      1: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.UserException }
    })
  });

  AuthenticationService.monolithAuthTokenFromNAPToken = Thrift.Method.define({
    alias: 'monolithAuthTokenFromNAPToken',
    args: Thrift.Struct.define('monolithAuthTokenFromNAPTokenArgs', {
      1: { alias: 'credential', type: Thrift.Type.STRUCT, def: module.exports.AuthenticationCredential, index: 0 }
    }),
    result: Thrift.Struct.define('monolithAuthTokenFromNAPTokenResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRING },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.UserNotFoundException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: AuthenticationErrors.SystemException }
    })
  });

  // Define AuthenticationService Client

  function AuthenticationServiceClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  AuthenticationServiceClient.prototype.authenticate = function(params, callback) {
    var mdef = AuthenticationService.authenticate;
    var args = new mdef.args();
    args.params = params;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.authenticateOpenID = function(credential, callback) {
    var mdef = AuthenticationService.authenticateOpenID;
    var args = new mdef.args();
    args.credential = credential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.validateUserForOAuth = function(uid, email, provider, callback) {
    var mdef = AuthenticationService.validateUserForOAuth;
    var args = new mdef.args();
    args.uid = uid;
    args.email = email;
    args.provider = provider;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.registerUser = function(credential, callback) {
    var mdef = AuthenticationService.registerUser;
    var args = new mdef.args();
    args.credential = credential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.validateForRegistration = function(credential, callback) {
    var mdef = AuthenticationService.validateForRegistration;
    var args = new mdef.args();
    args.credential = credential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.associateOpenIDWithUser = function(authenticationToken, credential, callback) {
    var mdef = AuthenticationService.associateOpenIDWithUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.credential = credential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.dissociateOpenIDFromUser = function(authenticationToken, credential, callback) {
    var mdef = AuthenticationService.dissociateOpenIDFromUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.credential = credential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.updatePassword = function(userId, oldPassword, newPassword, callback) {
    var mdef = AuthenticationService.updatePassword;
    var args = new mdef.args();
    args.userId = userId;
    args.oldPassword = oldPassword;
    args.newPassword = newPassword;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.dissociateAllOpenIDsFromUser = function(authenticationToken, callback) {
    var mdef = AuthenticationService.dissociateAllOpenIDsFromUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AuthenticationServiceClient.prototype.monolithAuthTokenFromNAPToken = function(credential, callback) {
    var mdef = AuthenticationService.monolithAuthTokenFromNAPToken;
    var args = new mdef.args();
    args.credential = credential;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.AuthenticationService.Client = AuthenticationServiceClient;

  // Define AuthenticationService Server

  function AuthenticationServiceServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in AuthenticationService) {
        if (service[methodName]) {
          this.processor.addMethod(AuthenticationService[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  AuthenticationServiceServer.prototype.start = function () {
    this.stransport.listen();
  };
  AuthenticationServiceServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.AuthenticationService.Server = AuthenticationServiceServer;


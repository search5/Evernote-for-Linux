//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var CommerceInternal = require('./CommerceInternal');
  var Errors = require('./Errors');
  var Types = require('./Types');
  var Utility = require('./Utility');


  module.exports.BetaFeatureStatusInternal = {
    'OPEN' : 0,
    'ACTIVE_FOR_ALL_USERS' : 50,
    'CLOSED' : 100
  };

  module.exports.BetaFeatureUserTypeInternal = {
    'PERSONAL' : 1,
    'BUSINESS' : 2
  };

  module.exports.CreateBusinessDiscountDealRequest = Thrift.Struct.define('CreateBusinessDiscountDealRequest',  {
    1: { alias: 'creatorId', type: Thrift.Type.I32 },
    2: { alias: 'businessId', type: Thrift.Type.I32 },
    3: { alias: 'unitPrice', type: Thrift.Type.I32 },
    4: { alias: 'startDate', type: Thrift.Type.I64 },
    5: { alias: 'endDate', type: Thrift.Type.I64 },
    6: { alias: 'seatCount', type: Thrift.Type.I32 }
  });

  module.exports.UpdateBusinessDiscountDealRequest = Thrift.Struct.define('UpdateBusinessDiscountDealRequest',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'unitPrice', type: Thrift.Type.I32 },
    3: { alias: 'currencyCode', type: Thrift.Type.STRING },
    4: { alias: 'startDate', type: Thrift.Type.I64 },
    5: { alias: 'endDate', type: Thrift.Type.I64 },
    6: { alias: 'seatCount', type: Thrift.Type.I32 }
  });

  module.exports.BusinessDiscountDeal = Thrift.Struct.define('BusinessDiscountDeal',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'creatorId', type: Thrift.Type.I32 },
    3: { alias: 'created', type: Thrift.Type.I64 },
    4: { alias: 'businessId', type: Thrift.Type.I32 },
    5: { alias: 'unitPrice', type: Thrift.Type.I32 },
    6: { alias: 'currencyCode', type: Thrift.Type.STRING },
    7: { alias: 'startDate', type: Thrift.Type.I64 },
    8: { alias: 'endDate', type: Thrift.Type.I64 },
    9: { alias: 'seatCount', type: Thrift.Type.I32 }
  });

  module.exports.CreateBusinessDiscountOfferRequest = Thrift.Struct.define('CreateBusinessDiscountOfferRequest',  {
    1: { alias: 'creatorId', type: Thrift.Type.I32 },
    2: { alias: 'unitPrice', type: Thrift.Type.I32 },
    3: { alias: 'currencyCode', type: Thrift.Type.STRING },
    4: { alias: 'email', type: Thrift.Type.STRING },
    5: { alias: 'businessName', type: Thrift.Type.STRING },
    6: { alias: 'seatCount', type: Thrift.Type.I32 },
    7: { alias: 'expiry', type: Thrift.Type.I64 }
  });

  module.exports.UpdateBusinessDiscountOfferRequest = Thrift.Struct.define('UpdateBusinessDiscountOfferRequest',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'unitPrice', type: Thrift.Type.I32 },
    3: { alias: 'currencyCode', type: Thrift.Type.STRING },
    4: { alias: 'email', type: Thrift.Type.STRING },
    5: { alias: 'businessName', type: Thrift.Type.STRING },
    6: { alias: 'seatCount', type: Thrift.Type.I32 },
    7: { alias: 'expiry', type: Thrift.Type.I64 }
  });

  module.exports.BusinessDiscountOffer = Thrift.Struct.define('BusinessDiscountOffer',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'creatorId', type: Thrift.Type.I32 },
    3: { alias: 'created', type: Thrift.Type.I64 },
    4: { alias: 'unitPrice', type: Thrift.Type.I32 },
    5: { alias: 'currencyCode', type: Thrift.Type.STRING },
    6: { alias: 'email', type: Thrift.Type.STRING },
    7: { alias: 'businessName', type: Thrift.Type.STRING },
    8: { alias: 'seatCount', type: Thrift.Type.I32 },
    9: { alias: 'expiry', type: Thrift.Type.I64 },
    10: { alias: 'dealId', type: Thrift.Type.I32 }
  });

  module.exports.BackToSchoolEmailLookUpResult = Thrift.Struct.define('BackToSchoolEmailLookUpResult',  {
    1: { alias: 'available', type: Thrift.Type.BOOL },
    2: { alias: 'whitelisted', type: Thrift.Type.BOOL },
    3: { alias: 'userId', type: Thrift.Type.I32 },
    4: { alias: 'created', type: Thrift.Type.I64 }
  });

  module.exports.CreateIncentiveRequest = Thrift.Struct.define('CreateIncentiveRequest',  {
    1: { alias: 'incentiveToCreate', type: Thrift.Type.STRUCT, def: CommerceInternal.Incentive }
  });

  module.exports.UpdateIncentiveRequest = Thrift.Struct.define('UpdateIncentiveRequest',  {
    1: { alias: 'id', type: Thrift.Type.I32 },
    2: { alias: 'enabled', type: Thrift.Type.BOOL },
    3: { alias: 'startDate', type: Thrift.Type.I64 },
    4: { alias: 'unsetStartDate', type: Thrift.Type.BOOL },
    5: { alias: 'endDate', type: Thrift.Type.I64 },
    6: { alias: 'unsetEndDate', type: Thrift.Type.BOOL },
    7: { alias: 'validationType', type: Thrift.Type.I32 },
    8: { alias: 'unsetValidationType', type: Thrift.Type.BOOL }
  });

  module.exports.BetaFeatureInternal = Thrift.Struct.define('BetaFeatureInternal',  {
    1: { alias: 'guid', type: Thrift.Type.STRING },
    2: { alias: 'featureKey', type: Thrift.Type.STRING },
    3: { alias: 'name', type: Thrift.Type.STRING },
    4: { alias: 'featureDescription', type: Thrift.Type.STRING },
    5: { alias: 'help', type: Thrift.Type.STRING },
    6: { alias: 'requireWaitlist', type: Thrift.Type.BOOL },
    7: { alias: 'teamSizeMin', type: Thrift.Type.I32 },
    8: { alias: 'teamSizeMax', type: Thrift.Type.I32 },
    9: { alias: 'startDate', type: Thrift.Type.I64 },
    10: { alias: 'endDate', type: Thrift.Type.I64 },
    11: { alias: 'countryCodes', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    12: { alias: 'whitelistedBusinessIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32)  },
    13: { alias: 'blacklistedBusinessIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32)  },
    14: { alias: 'status', type: Thrift.Type.I32 },
    15: { alias: 'businessOnly', type: Thrift.Type.BOOL },
    16: { alias: 'notificationsEnabled', type: Thrift.Type.BOOL },
    17: { alias: 'premiumOnly', type: Thrift.Type.BOOL },
    18: { alias: 'userType', type: Thrift.Type.I32 }
  });

  module.exports.BetaFeatureEnrollmentInternal = Thrift.Struct.define('BetaFeatureEnrollmentInternal',  {
    1: { alias: 'guid', type: Thrift.Type.STRING },
    2: { alias: 'featureGuid', type: Thrift.Type.STRING },
    3: { alias: 'featureKey', type: Thrift.Type.STRING },
    4: { alias: 'userId', type: Thrift.Type.I32 },
    5: { alias: 'businessId', type: Thrift.Type.I32 },
    6: { alias: 'submitterUserId', type: Thrift.Type.I32 },
    7: { alias: 'status', type: Thrift.Type.I32 },
    8: { alias: 'statusDate', type: Thrift.Type.I64 },
    9: { alias: 'enrollerName', type: Thrift.Type.STRING },
    10: { alias: 'disabledDate', type: Thrift.Type.I64 },
    11: { alias: 'notificationsEnabled', type: Thrift.Type.BOOL }
  });

  module.exports.EnrollAndEnableIntoBetaFeatureResult = Thrift.Struct.define('EnrollAndEnableIntoBetaFeatureResult',  {
    1: { alias: 'succeededIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32)  },
    2: { alias: 'failedIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32)  }
  });

  module.exports.ListEnrollmentsForBetaFeatureResult = Thrift.Struct.define('ListEnrollmentsForBetaFeatureResult',  {
    1: { alias: 'enrollments', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.BetaFeatureEnrollmentInternal)  },
    2: { alias: 'firstResult', type: Thrift.Type.I32 },
    3: { alias: 'maxResults', type: Thrift.Type.I32 },
    4: { alias: 'totalResults', type: Thrift.Type.I32 }
  });

  module.exports.BlacklistedDomain = Thrift.Struct.define('BlacklistedDomain',  {
    1: { alias: 'guid', type: Thrift.Type.STRING },
    2: { alias: 'domain', type: Thrift.Type.STRING },
    3: { alias: 'isActive', type: Thrift.Type.BOOL },
    4: { alias: 'comment', type: Thrift.Type.STRING }
  });

  module.exports.AddBlacklistedDomainsResult = Thrift.Struct.define('AddBlacklistedDomainsResult',  {
    1: { alias: 'succeededDomains', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  },
    2: { alias: 'failedDomains', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING)  }
  });

  module.exports.ListBlacklistedDomainsResult = Thrift.Struct.define('ListBlacklistedDomainsResult',  {
    1: { alias: 'domains', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.BlacklistedDomain)  },
    2: { alias: 'firstResult', type: Thrift.Type.I32 },
    3: { alias: 'maxResults', type: Thrift.Type.I32 },
    4: { alias: 'totalResults', type: Thrift.Type.I32 }
  });

  module.exports.BlacklistedDomains = Thrift.Struct.define('BlacklistedDomains',  {
    1: { alias: 'domains', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.STRING) }
  });

  var AdminService = module.exports.AdminService = {};

  AdminService.createBusinessDiscountDeal = Thrift.Method.define({
    alias: 'createBusinessDiscountDeal',
    args: Thrift.Struct.define('createBusinessDiscountDealArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.CreateBusinessDiscountDealRequest, index: 1 }
    }),
    result: Thrift.Struct.define('createBusinessDiscountDealResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessDiscountDeal },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  AdminService.getBusinessDiscountDeal = Thrift.Method.define({
    alias: 'getBusinessDiscountDeal',
    args: Thrift.Struct.define('getBusinessDiscountDealArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'dealId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('getBusinessDiscountDealResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessDiscountDeal },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  AdminService.updateBusinessDiscountDeal = Thrift.Method.define({
    alias: 'updateBusinessDiscountDeal',
    args: Thrift.Struct.define('updateBusinessDiscountDealArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.UpdateBusinessDiscountDealRequest, index: 1 }
    }),
    result: Thrift.Struct.define('updateBusinessDiscountDealResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessDiscountDeal },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  AdminService.cancelBusinessDiscountDeal = Thrift.Method.define({
    alias: 'cancelBusinessDiscountDeal',
    args: Thrift.Struct.define('cancelBusinessDiscountDealArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'dealId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('cancelBusinessDiscountDealResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.endBusinessDiscountDeal = Thrift.Method.define({
    alias: 'endBusinessDiscountDeal',
    args: Thrift.Struct.define('endBusinessDiscountDealArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'dealId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('endBusinessDiscountDealResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessDiscountDeal },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  AdminService.listAllBusinessDiscountDeals = Thrift.Method.define({
    alias: 'listAllBusinessDiscountDeals',
    args: Thrift.Struct.define('listAllBusinessDiscountDealsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listAllBusinessDiscountDealsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.BusinessDiscountDeal)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.listDiscountDealsForBusiness = Thrift.Method.define({
    alias: 'listDiscountDealsForBusiness',
    args: Thrift.Struct.define('listDiscountDealsForBusinessArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'businessId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('listDiscountDealsForBusinessResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.BusinessDiscountDeal)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.createBusinessDiscountOffer = Thrift.Method.define({
    alias: 'createBusinessDiscountOffer',
    args: Thrift.Struct.define('createBusinessDiscountOfferArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.CreateBusinessDiscountOfferRequest, index: 1 }
    }),
    result: Thrift.Struct.define('createBusinessDiscountOfferResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessDiscountOffer },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.updateBusinessDiscountOffer = Thrift.Method.define({
    alias: 'updateBusinessDiscountOffer',
    args: Thrift.Struct.define('updateBusinessDiscountOfferArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.UpdateBusinessDiscountOfferRequest, index: 1 }
    }),
    result: Thrift.Struct.define('updateBusinessDiscountOfferResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BusinessDiscountOffer },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  AdminService.cancelBusinessDiscountOffer = Thrift.Method.define({
    alias: 'cancelBusinessDiscountOffer',
    args: Thrift.Struct.define('cancelBusinessDiscountOfferArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'offerId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('cancelBusinessDiscountOfferResult', {
      0: { alias: 'returnValue',type: Thrift.Type.BOOL },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.listAllBusinessDiscountOffers = Thrift.Method.define({
    alias: 'listAllBusinessDiscountOffers',
    args: Thrift.Struct.define('listAllBusinessDiscountOffersArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listAllBusinessDiscountOffersResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.BusinessDiscountOffer)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.setupECCBusiness = Thrift.Method.define({
    alias: 'setupECCBusiness',
    args: Thrift.Struct.define('setupECCBusinessArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'businessId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('setupECCBusinessResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException },
      3: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException }
    })
  });

  AdminService.lookUpBackToSchoolEmail = Thrift.Method.define({
    alias: 'lookUpBackToSchoolEmail',
    args: Thrift.Struct.define('lookUpBackToSchoolEmailArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'email', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('lookUpBackToSchoolEmailResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.BackToSchoolEmailLookUpResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.createIncentive = Thrift.Method.define({
    alias: 'createIncentive',
    args: Thrift.Struct.define('createIncentiveArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'createIncentiveRequest', type: Thrift.Type.STRUCT, def: module.exports.CreateIncentiveRequest, index: 1 }
    }),
    result: Thrift.Struct.define('createIncentiveResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: CommerceInternal.Incentive },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.updateIncentive = Thrift.Method.define({
    alias: 'updateIncentive',
    args: Thrift.Struct.define('updateIncentiveArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'updateIncentiveRequest', type: Thrift.Type.STRUCT, def: module.exports.UpdateIncentiveRequest, index: 1 }
    }),
    result: Thrift.Struct.define('updateIncentiveResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: CommerceInternal.Incentive },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.deactivateBusinessUser = Thrift.Method.define({
    alias: 'deactivateBusinessUser',
    args: Thrift.Struct.define('deactivateBusinessUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('deactivateBusinessUserResult', {
      1: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.deactivateBusinessUserEvenLastAdmin = Thrift.Method.define({
    alias: 'deactivateBusinessUserEvenLastAdmin',
    args: Thrift.Struct.define('deactivateBusinessUserEvenLastAdminArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('deactivateBusinessUserEvenLastAdminResult', {
      1: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.reactivateBusinessUser = Thrift.Method.define({
    alias: 'reactivateBusinessUser',
    args: Thrift.Struct.define('reactivateBusinessUserArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'userId', type: Thrift.Type.I32, index: 1 }
    }),
    result: Thrift.Struct.define('reactivateBusinessUserResult', {
      1: { alias: 'notFoundException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMNotFoundException },
      2: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      3: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.listBetaFeatures = Thrift.Method.define({
    alias: 'listBetaFeatures',
    args: Thrift.Struct.define('listBetaFeaturesArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('listBetaFeaturesResult', {
      0: { alias: 'returnValue',type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.BetaFeatureInternal)  },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.updateBetaFeature = Thrift.Method.define({
    alias: 'updateBetaFeature',
    args: Thrift.Struct.define('updateBetaFeatureArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'feature', type: Thrift.Type.STRUCT, def: module.exports.BetaFeatureInternal, index: 1 }
    }),
    result: Thrift.Struct.define('updateBetaFeatureResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.listEnrollmentsForBetaFeature = Thrift.Method.define({
    alias: 'listEnrollmentsForBetaFeature',
    args: Thrift.Struct.define('listEnrollmentsForBetaFeatureArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'featureGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'firstResult', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'maxResults', type: Thrift.Type.I32, index: 3 }
    }),
    result: Thrift.Struct.define('listEnrollmentsForBetaFeatureResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.ListEnrollmentsForBetaFeatureResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.listEnrollmentsForBetaFeatureAndStatus = Thrift.Method.define({
    alias: 'listEnrollmentsForBetaFeatureAndStatus',
    args: Thrift.Struct.define('listEnrollmentsForBetaFeatureAndStatusArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'featureGuid', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'status', type: Thrift.Type.I32, index: 2 },
      4: { alias: 'firstResult', type: Thrift.Type.I32, index: 3 },
      5: { alias: 'maxResults', type: Thrift.Type.I32, index: 4 }
    }),
    result: Thrift.Struct.define('listEnrollmentsForBetaFeatureAndStatusResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.ListEnrollmentsForBetaFeatureResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.approveBetaFeatureEnrollment = Thrift.Method.define({
    alias: 'approveBetaFeatureEnrollment',
    args: Thrift.Struct.define('approveBetaFeatureEnrollmentArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'enrollmentGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('approveBetaFeatureEnrollmentResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.enrollAndEnableBusinessesIntoBetaFeature = Thrift.Method.define({
    alias: 'enrollAndEnableBusinessesIntoBetaFeature',
    args: Thrift.Struct.define('enrollAndEnableBusinessesIntoBetaFeatureArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'featureKey', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'businessIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32) , index: 2 }
    }),
    result: Thrift.Struct.define('enrollAndEnableBusinessesIntoBetaFeatureResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.EnrollAndEnableIntoBetaFeatureResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.enrollAndEnableUsersIntoBetaFeature = Thrift.Method.define({
    alias: 'enrollAndEnableUsersIntoBetaFeature',
    args: Thrift.Struct.define('enrollAndEnableUsersIntoBetaFeatureArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'featureKey', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'userIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32) , index: 2 }
    }),
    result: Thrift.Struct.define('enrollAndEnableUsersIntoBetaFeatureResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.EnrollAndEnableIntoBetaFeatureResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.listBlacklistedDomains = Thrift.Method.define({
    alias: 'listBlacklistedDomains',
    args: Thrift.Struct.define('listBlacklistedDomainsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'firstResult', type: Thrift.Type.I32, index: 1 },
      3: { alias: 'maxResults', type: Thrift.Type.I32, index: 2 }
    }),
    result: Thrift.Struct.define('listBlacklistedDomainsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.ListBlacklistedDomainsResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.addOrUpdateBlacklistedDomain = Thrift.Method.define({
    alias: 'addOrUpdateBlacklistedDomain',
    args: Thrift.Struct.define('addOrUpdateBlacklistedDomainArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'domain', type: Thrift.Type.STRUCT, def: module.exports.BlacklistedDomain, index: 1 }
    }),
    result: Thrift.Struct.define('addOrUpdateBlacklistedDomainResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.deleteBlacklistedDomain = Thrift.Method.define({
    alias: 'deleteBlacklistedDomain',
    args: Thrift.Struct.define('deleteBlacklistedDomainArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'domainGuid', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('deleteBlacklistedDomainResult', {
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  AdminService.addBlacklistedDomains = Thrift.Method.define({
    alias: 'addBlacklistedDomains',
    args: Thrift.Struct.define('addBlacklistedDomainsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      3: { alias: 'domains', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRING) , index: 1 }
    }),
    result: Thrift.Struct.define('addBlacklistedDomainsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.AddBlacklistedDomainsResult },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  // Define AdminService Client

  function AdminServiceClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  AdminServiceClient.prototype.createBusinessDiscountDeal = function(authenticationToken, request, callback) {
    var mdef = AdminService.createBusinessDiscountDeal;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.getBusinessDiscountDeal = function(authenticationToken, dealId, callback) {
    var mdef = AdminService.getBusinessDiscountDeal;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.dealId = dealId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.updateBusinessDiscountDeal = function(authenticationToken, request, callback) {
    var mdef = AdminService.updateBusinessDiscountDeal;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.cancelBusinessDiscountDeal = function(authenticationToken, dealId, callback) {
    var mdef = AdminService.cancelBusinessDiscountDeal;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.dealId = dealId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.endBusinessDiscountDeal = function(authenticationToken, dealId, callback) {
    var mdef = AdminService.endBusinessDiscountDeal;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.dealId = dealId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.listAllBusinessDiscountDeals = function(authenticationToken, callback) {
    var mdef = AdminService.listAllBusinessDiscountDeals;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.listDiscountDealsForBusiness = function(authenticationToken, businessId, callback) {
    var mdef = AdminService.listDiscountDealsForBusiness;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.businessId = businessId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.createBusinessDiscountOffer = function(authenticationToken, request, callback) {
    var mdef = AdminService.createBusinessDiscountOffer;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.updateBusinessDiscountOffer = function(authenticationToken, request, callback) {
    var mdef = AdminService.updateBusinessDiscountOffer;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.cancelBusinessDiscountOffer = function(authenticationToken, offerId, callback) {
    var mdef = AdminService.cancelBusinessDiscountOffer;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.offerId = offerId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.listAllBusinessDiscountOffers = function(authenticationToken, callback) {
    var mdef = AdminService.listAllBusinessDiscountOffers;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.setupECCBusiness = function(authenticationToken, businessId, callback) {
    var mdef = AdminService.setupECCBusiness;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.businessId = businessId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.lookUpBackToSchoolEmail = function(authenticationToken, email, callback) {
    var mdef = AdminService.lookUpBackToSchoolEmail;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.email = email;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.createIncentive = function(authenticationToken, createIncentiveRequest, callback) {
    var mdef = AdminService.createIncentive;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.createIncentiveRequest = createIncentiveRequest;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.updateIncentive = function(authenticationToken, updateIncentiveRequest, callback) {
    var mdef = AdminService.updateIncentive;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.updateIncentiveRequest = updateIncentiveRequest;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.deactivateBusinessUser = function(authenticationToken, userId, callback) {
    var mdef = AdminService.deactivateBusinessUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userId = userId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.deactivateBusinessUserEvenLastAdmin = function(authenticationToken, userId, callback) {
    var mdef = AdminService.deactivateBusinessUserEvenLastAdmin;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userId = userId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.reactivateBusinessUser = function(authenticationToken, userId, callback) {
    var mdef = AdminService.reactivateBusinessUser;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.userId = userId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.listBetaFeatures = function(authenticationToken, callback) {
    var mdef = AdminService.listBetaFeatures;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.updateBetaFeature = function(authenticationToken, feature, callback) {
    var mdef = AdminService.updateBetaFeature;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.feature = feature;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.listEnrollmentsForBetaFeature = function(authenticationToken, featureGuid, firstResult, maxResults, callback) {
    var mdef = AdminService.listEnrollmentsForBetaFeature;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.featureGuid = featureGuid;
    args.firstResult = firstResult;
    args.maxResults = maxResults;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.listEnrollmentsForBetaFeatureAndStatus = function(authenticationToken, featureGuid, status, firstResult, maxResults, callback) {
    var mdef = AdminService.listEnrollmentsForBetaFeatureAndStatus;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.featureGuid = featureGuid;
    args.status = status;
    args.firstResult = firstResult;
    args.maxResults = maxResults;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.approveBetaFeatureEnrollment = function(authenticationToken, enrollmentGuid, callback) {
    var mdef = AdminService.approveBetaFeatureEnrollment;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.enrollmentGuid = enrollmentGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.enrollAndEnableBusinessesIntoBetaFeature = function(authenticationToken, featureKey, businessIds, callback) {
    var mdef = AdminService.enrollAndEnableBusinessesIntoBetaFeature;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.featureKey = featureKey;
    args.businessIds = businessIds;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.enrollAndEnableUsersIntoBetaFeature = function(authenticationToken, featureKey, userIds, callback) {
    var mdef = AdminService.enrollAndEnableUsersIntoBetaFeature;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.featureKey = featureKey;
    args.userIds = userIds;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.listBlacklistedDomains = function(authenticationToken, firstResult, maxResults, callback) {
    var mdef = AdminService.listBlacklistedDomains;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.firstResult = firstResult;
    args.maxResults = maxResults;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.addOrUpdateBlacklistedDomain = function(authenticationToken, domain, callback) {
    var mdef = AdminService.addOrUpdateBlacklistedDomain;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.domain = domain;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.deleteBlacklistedDomain = function(authenticationToken, domainGuid, callback) {
    var mdef = AdminService.deleteBlacklistedDomain;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.domainGuid = domainGuid;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  AdminServiceClient.prototype.addBlacklistedDomains = function(authenticationToken, domains, callback) {
    var mdef = AdminService.addBlacklistedDomains;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.domains = domains;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.AdminService.Client = AdminServiceClient;

  // Define AdminService Server

  function AdminServiceServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in AdminService) {
        if (service[methodName]) {
          this.processor.addMethod(AdminService[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  AdminServiceServer.prototype.start = function () {
    this.stransport.listen();
  };
  AdminServiceServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.AdminService.Server = AdminServiceServer;


//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var Errors = require('./Errors');


  module.exports.TClientType = {
    'MAC' : 0,
    'WINDOWS' : 1,
    'IOS' : 2,
    'ANDROID' : 3,
    'WEB' : 4,
    'CLIPPER' : 5,
    'ION' : 6,
    'COMM_ENGINE' : 7,
    'NEUTRON' : 8,
    'BORON' : 9
  };

  module.exports.TExperimentArmId = Thrift.Struct.define('TExperimentArmId',  {
    1: { alias: 'experimentName', type: Thrift.Type.STRING },
    2: { alias: 'experimentArmName', type: Thrift.Type.STRING }
  });

  module.exports.TGetPropsRequest = Thrift.Struct.define('TGetPropsRequest',  {
    1: { alias: 'clientType', type: Thrift.Type.I32 },
    2: { alias: 'overridingArmIds', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, module.exports.TExperimentArmId)  },
    3: { alias: 'userInfo', type: Thrift.Type.STRING }
  });

  module.exports.TGetPropsResponse = Thrift.Struct.define('TGetPropsResponse',  {
    1: { alias: 'protoResponse', type: Thrift.Type.BINARY }
  });

  module.exports.TGetPropsJsonResponse = Thrift.Struct.define('TGetPropsJsonResponse',  {
    1: { alias: 'jsonResponse', type: Thrift.Type.STRING }
  });

  module.exports.TGetServiceStateRequest = Thrift.Struct.define('TGetServiceStateRequest',  {
    1: { alias: 'clientType', type: Thrift.Type.I32 }
  });

  module.exports.TGetServiceStateResponse = Thrift.Struct.define('TGetServiceStateResponse',  {
    1: { alias: 'protoResponse', type: Thrift.Type.BINARY }
  });

  module.exports.TGetServiceStateJsonResponse = Thrift.Struct.define('TGetServiceStateJsonResponse',  {
    1: { alias: 'jsonResponse', type: Thrift.Type.STRING }
  });

  var ExperimentsService = module.exports.ExperimentsService = {};

  ExperimentsService.getProps = Thrift.Method.define({
    alias: 'getProps',
    args: Thrift.Struct.define('getPropsArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.TGetPropsRequest, index: 1 }
    }),
    result: Thrift.Struct.define('getPropsResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.TGetPropsResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  ExperimentsService.getServiceState = Thrift.Method.define({
    alias: 'getServiceState',
    args: Thrift.Struct.define('getServiceStateArgs', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.TGetServiceStateRequest, index: 1 }
    }),
    result: Thrift.Struct.define('getServiceStateResult', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.TGetServiceStateResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  ExperimentsService.getProps2 = Thrift.Method.define({
    alias: 'getProps2',
    args: Thrift.Struct.define('getProps2Args', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.TGetPropsRequest, index: 1 }
    }),
    result: Thrift.Struct.define('getProps2Result', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.TGetPropsJsonResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  ExperimentsService.getServiceState2 = Thrift.Method.define({
    alias: 'getServiceState2',
    args: Thrift.Struct.define('getServiceState2Args', {
      1: { alias: 'authenticationToken', type: Thrift.Type.STRING, index: 0 },
      2: { alias: 'request', type: Thrift.Type.STRUCT, def: module.exports.TGetServiceStateRequest, index: 1 }
    }),
    result: Thrift.Struct.define('getServiceState2Result', {
      0: { alias: 'returnValue',type: Thrift.Type.STRUCT, def: module.exports.TGetServiceStateJsonResponse },
      1: { alias: 'userException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMUserException },
      2: { alias: 'systemException', type: Thrift.Type.EXCEPTION, def: Errors.EDAMSystemException }
    })
  });

  // Define ExperimentsService Client

  function ExperimentsServiceClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  ExperimentsServiceClient.prototype.getProps = function(authenticationToken, request, callback) {
    var mdef = ExperimentsService.getProps;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  ExperimentsServiceClient.prototype.getServiceState = function(authenticationToken, request, callback) {
    var mdef = ExperimentsService.getServiceState;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  ExperimentsServiceClient.prototype.getProps2 = function(authenticationToken, request, callback) {
    var mdef = ExperimentsService.getProps2;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  ExperimentsServiceClient.prototype.getServiceState2 = function(authenticationToken, request, callback) {
    var mdef = ExperimentsService.getServiceState2;
    var args = new mdef.args();
    args.authenticationToken = authenticationToken;
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.ExperimentsService.Client = ExperimentsServiceClient;

  // Define ExperimentsService Server

  function ExperimentsServiceServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in ExperimentsService) {
        if (service[methodName]) {
          this.processor.addMethod(ExperimentsService[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  ExperimentsServiceServer.prototype.start = function () {
    this.stransport.listen();
  };
  ExperimentsServiceServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.ExperimentsService.Server = ExperimentsServiceServer;


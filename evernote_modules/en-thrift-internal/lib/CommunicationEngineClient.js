//
// Autogenerated by Thrift Compiler (0.7.0-en-11139b3b5cb61e817408c6e84b0e1c258bf6c6ae)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


  // Define types and services

  var Thrift = require('evernote-thrift').Thrift;
  var CommunicationEngineTypes = require('./CommunicationEngineTypes');


  var SharedAPI = module.exports.SharedAPI = {};

  SharedAPI.processServerResponse = Thrift.Method.define({
    oneway: true,
    alias: 'processServerResponse',
    args: Thrift.Struct.define('processServerResponseArgs', {
      1: { alias: 'response', type: Thrift.Type.STRUCT, def: CommunicationEngineTypes.MessageResponse, index: 0 }
    }),
    result: Thrift.Struct.define('processServerResponseResult')
  });

  SharedAPI.initialize = Thrift.Method.define({
    oneway: true,
    alias: 'initialize',
    args: Thrift.Struct.define('initializeArgs', {
      1: { alias: 'supportedPlacements', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32) , index: 0 },
      2: { alias: 'supportedTriggers', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.I32) , index: 1 },
      3: { alias: 'savedState', type: Thrift.Type.BINARY, index: 2 }
    }),
    result: Thrift.Struct.define('initializeResult')
  });

  SharedAPI.trigger = Thrift.Method.define({
    oneway: true,
    alias: 'trigger',
    args: Thrift.Struct.define('triggerArgs', {
      1: { alias: 'trigger', type: Thrift.Type.STRUCT, def: CommunicationEngineTypes.Trigger, index: 0 }
    }),
    result: Thrift.Struct.define('triggerResult')
  });

  SharedAPI.requestPlacement = Thrift.Method.define({
    oneway: true,
    alias: 'requestPlacement',
    args: Thrift.Struct.define('requestPlacementArgs', {
      1: { alias: 'placement', type: Thrift.Type.I32, index: 0 }
    }),
    result: Thrift.Struct.define('requestPlacementResult')
  });

  SharedAPI.placementIsVisible = Thrift.Method.define({
    oneway: true,
    alias: 'placementIsVisible',
    args: Thrift.Struct.define('placementIsVisibleArgs', {
      1: { alias: 'placement', type: Thrift.Type.I32, index: 0 }
    }),
    result: Thrift.Struct.define('placementIsVisibleResult')
  });

  SharedAPI.userAction = Thrift.Method.define({
    oneway: true,
    alias: 'userAction',
    args: Thrift.Struct.define('userActionArgs', {
      1: { alias: 'placement', type: Thrift.Type.I32, index: 0 },
      2: { alias: 'blob', type: Thrift.Type.STRING, index: 1 }
    }),
    result: Thrift.Struct.define('userActionResult')
  });

  SharedAPI.syncComplete = Thrift.Method.define({
    oneway: true,
    alias: 'syncComplete',
    args: Thrift.Struct.define('syncCompleteArgs', {
      1: { alias: 'communicationEngineUpdateId', type: Thrift.Type.I32, index: 0 }
    }),
    result: Thrift.Struct.define('syncCompleteResult')
  });

  SharedAPI.placementWasDismissed = Thrift.Method.define({
    oneway: true,
    alias: 'placementWasDismissed',
    args: Thrift.Struct.define('placementWasDismissedArgs', {
      1: { alias: 'placement', type: Thrift.Type.I32, index: 0 }
    }),
    result: Thrift.Struct.define('placementWasDismissedResult')
  });

  SharedAPI.placementWillNotBeVisible = Thrift.Method.define({
    oneway: true,
    alias: 'placementWillNotBeVisible',
    args: Thrift.Struct.define('placementWillNotBeVisibleArgs', {
      1: { alias: 'placement', type: Thrift.Type.I32, index: 0 }
    }),
    result: Thrift.Struct.define('placementWillNotBeVisibleResult')
  });

  // Define SharedAPI Client

  function SharedAPIClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  SharedAPIClient.prototype.processServerResponse = function(response, callback) {
    var mdef = SharedAPI.processServerResponse;
    var args = new mdef.args();
    args.response = response;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  SharedAPIClient.prototype.initialize = function(supportedPlacements, supportedTriggers, savedState, callback) {
    var mdef = SharedAPI.initialize;
    var args = new mdef.args();
    args.supportedPlacements = supportedPlacements;
    args.supportedTriggers = supportedTriggers;
    args.savedState = savedState;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  SharedAPIClient.prototype.trigger = function(trigger, callback) {
    var mdef = SharedAPI.trigger;
    var args = new mdef.args();
    args.trigger = trigger;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  SharedAPIClient.prototype.requestPlacement = function(placement, callback) {
    var mdef = SharedAPI.requestPlacement;
    var args = new mdef.args();
    args.placement = placement;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  SharedAPIClient.prototype.placementIsVisible = function(placement, callback) {
    var mdef = SharedAPI.placementIsVisible;
    var args = new mdef.args();
    args.placement = placement;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  SharedAPIClient.prototype.userAction = function(placement, blob, callback) {
    var mdef = SharedAPI.userAction;
    var args = new mdef.args();
    args.placement = placement;
    args.blob = blob;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  SharedAPIClient.prototype.syncComplete = function(communicationEngineUpdateId, callback) {
    var mdef = SharedAPI.syncComplete;
    var args = new mdef.args();
    args.communicationEngineUpdateId = communicationEngineUpdateId;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  SharedAPIClient.prototype.placementWasDismissed = function(placement, callback) {
    var mdef = SharedAPI.placementWasDismissed;
    var args = new mdef.args();
    args.placement = placement;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  SharedAPIClient.prototype.placementWillNotBeVisible = function(placement, callback) {
    var mdef = SharedAPI.placementWillNotBeVisible;
    var args = new mdef.args();
    args.placement = placement;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.SharedAPI.Client = SharedAPIClient;

  // Define SharedAPI Server

  function SharedAPIServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in SharedAPI) {
        if (service[methodName]) {
          this.processor.addMethod(SharedAPI[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  SharedAPIServer.prototype.start = function () {
    this.stransport.listen();
  };
  SharedAPIServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.SharedAPI.Server = SharedAPIServer;

  var MainApp = module.exports.MainApp = {};

  MainApp.getMessages = Thrift.Method.define({
    oneway: true,
    alias: 'getMessages',
    args: Thrift.Struct.define('getMessagesArgs', {
      1: { alias: 'request', type: Thrift.Type.STRUCT, def: CommunicationEngineTypes.MessageRequest, index: 0 }
    }),
    result: Thrift.Struct.define('getMessagesResult')
  });

  MainApp.show = Thrift.Method.define({
    oneway: true,
    alias: 'show',
    args: Thrift.Struct.define('showArgs', {
      1: { alias: 'placement', type: Thrift.Type.I32, index: 0 },
      2: { alias: 'content', type: Thrift.Type.STRING, index: 1 },
      3: { alias: 'priority', type: Thrift.Type.I32, index: 2 }
    }),
    result: Thrift.Struct.define('showResult')
  });

  MainApp.sendEvents = Thrift.Method.define({
    oneway: true,
    alias: 'sendEvents',
    args: Thrift.Struct.define('sendEventsArgs', {
      1: { alias: 'events', type: Thrift.Type.LIST, def: Thrift.List.define(Thrift.Type.STRUCT, CommunicationEngineTypes.Event) , index: 0 }
    }),
    result: Thrift.Struct.define('sendEventsResult')
  });

  MainApp.log = Thrift.Method.define({
    oneway: true,
    alias: 'log',
    args: Thrift.Struct.define('logArgs', {
      1: { alias: 'message', type: Thrift.Type.STRING, index: 0 }
    }),
    result: Thrift.Struct.define('logResult')
  });

  MainApp.dismissMessage = Thrift.Method.define({
    oneway: true,
    alias: 'dismissMessage',
    args: Thrift.Struct.define('dismissMessageArgs', {
      1: { alias: 'placement', type: Thrift.Type.I32, index: 0 }
    }),
    result: Thrift.Struct.define('dismissMessageResult')
  });

  MainApp.saveState = Thrift.Method.define({
    oneway: true,
    alias: 'saveState',
    args: Thrift.Struct.define('saveStateArgs', {
      1: { alias: 'state', type: Thrift.Type.BINARY, index: 0 }
    }),
    result: Thrift.Struct.define('saveStateResult')
  });

  MainApp.placementsAvailable = Thrift.Method.define({
    oneway: true,
    alias: 'placementsAvailable',
    args: Thrift.Struct.define('placementsAvailableArgs', {
      1: { alias: 'placements', type: Thrift.Type.SET, def: Thrift.Set.define(Thrift.Type.I32), index: 0 }
    }),
    result: Thrift.Struct.define('placementsAvailableResult')
  });

  // Define MainApp Client

  function MainAppClient(output) {
    this.output = output;
    this.seqid = 0;
  }

  MainAppClient.prototype.getMessages = function(request, callback) {
    var mdef = MainApp.getMessages;
    var args = new mdef.args();
    args.request = request;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  MainAppClient.prototype.show = function(placement, content, priority, callback) {
    var mdef = MainApp.show;
    var args = new mdef.args();
    args.placement = placement;
    args.content = content;
    args.priority = priority;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  MainAppClient.prototype.sendEvents = function(events, callback) {
    var mdef = MainApp.sendEvents;
    var args = new mdef.args();
    args.events = events;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  MainAppClient.prototype.log = function(message, callback) {
    var mdef = MainApp.log;
    var args = new mdef.args();
    args.message = message;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  MainAppClient.prototype.dismissMessage = function(placement, callback) {
    var mdef = MainApp.dismissMessage;
    var args = new mdef.args();
    args.placement = placement;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  MainAppClient.prototype.saveState = function(state, callback) {
    var mdef = MainApp.saveState;
    var args = new mdef.args();
    args.state = state;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  MainAppClient.prototype.placementsAvailable = function(placements, callback) {
    var mdef = MainApp.placementsAvailable;
    var args = new mdef.args();
    args.placements = placements;
    mdef.sendRequest(this.output, this.seqid++, args, callback);
  };

  module.exports.MainApp.Client = MainAppClient;

  // Define MainApp Server

  function MainAppServer(service, stransport, Protocol) {
    var methodName;
      this.service = service;
      this.stransport = stransport;
      this.processor = new Thrift.Processor();
      for (methodName in MainApp) {
        if (service[methodName]) {
          this.processor.addMethod(MainApp[methodName], service[methodName].bind(service));
        }
      }
      this.stransport.process = function (input, output, noop) {
      var inprot = new Protocol(input);
      var outprot = new Protocol(output);
      this.processor.process(inprot, outprot, noop);
    }.bind(this);
  }

  MainAppServer.prototype.start = function () {
    this.stransport.listen();
  };
  MainAppServer.prototype.stop = function () {
    this.stransport.close();
  };

  module.exports.MainApp.Server = MainAppServer;

